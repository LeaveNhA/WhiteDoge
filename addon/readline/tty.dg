import '/os'
import 'ansi/Sequence'

_lowlevel = except
  _e => import 'tty_unix'
  _e => except
   _e => import 'tty_windows'
   _e => raise $ ImportError 'no terminal driver'


Teletype = subclass _lowlevel.Teletype where
  #: Various TTY-related functions.
  #:
  #: input  :: TextIOBase -- 'r'-mode TTY.
  #: output :: TextIOBase -- 'w'-mode TTY.
  #:
  __init__ = @input @output @name: None ~>
    not @input .isatty! => raise $ IOError 'input: not a tty'
    not @output.isatty! => raise $ IOError 'output: not a tty'
    None

  fileno = ~> @input.fileno
  read   = ~> @input.read
  write  = ~> @output.write
  flush  = ~> @output.flush

  #: Determine the length of an ANSI-escaped string. ANSI escapes are assumed to be empty.
  #:
  #: ansi_len :: str -> int
  #:
  ansi_len = classmethod $ data ~> len $ Sequence.sub '' data

  #: Check whether a key's value is printable.
  #:
  #: printable :: str -> bool
  #:
  printable = classmethod $ data ~> if
    len data == 0 => True
    len data >= 2 => False  # only ANSI sequences match this
    otherwise     => 32 <= ord data < 127 or 160 <= ord data

  #: Iterate over keypresses until EOL.
  #:
  #: line :: iter str
  #:
  line = ~> while (c = @key) != '\n' => yield c
