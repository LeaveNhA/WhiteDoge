import '/os'
import '/imp'
import '/sys'
import '/marshal'
import '/itertools'
import '/importlib/util' qualified

import '../../compile'


sys.meta_path.insert 0 $ subclass str where

  find_module = classmethod $ (cls mod path: None) ->
    name = mod.rsplit '.' 1 !! -1
    mods = itertools.chain.from_iterable $ map
      dir ->
        base = os.path.join dir name
        os.path.join base '__init__.dg',  base + '.dg'
      filter os.path.isdir $ map os.path.abspath
        if path is None do sys.path
           otherwise    do path

    unsafe
      e = cls $ next $ filter os.path.isfile mods
      e :: StopIteration = None

  is_package = (self name) ->
    name.rsplit '.' 1 !! -1 != (os.path.basename self).rsplit '.' 1 !! 0

  get_code = (self name) ->
    cache = imp.cache_from_source self
    code  = unsafe
      e = (os.stat self).st_mtime <= (os.stat cache).st_mtime and marshal.load (open cache 'rb')
      e :: Exception = None

    code or
      code = compile.fd $ open $ str self

      os.makedirs (os.path.dirname cache) exist_ok: True
      marshal.dump code $ open cache 'wb'
      code

  get_filename = (self name) -> self

  load_module = importlib.util.module_for_loader $ (self module) ->
    init = (module.__name__.rpartition '.' !! 0) or None
    code = self.get_code module.__name__

    module.__file__    = self
    module.__loader__  = self
    module.__package__ = init

    if self.is_package module.__name__ do
      module.__path__    = list' $ os.path.dirname self
      module.__package__ = module.__name__

    eval code module.__dict__
    module
