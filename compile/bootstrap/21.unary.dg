INFIXL !! '!' = (self _ q) -> self.call q
INFIXR !! '!' = (self f _) -> syntax.error 'use "not"' f
PREFIX !! '!' = (self f _) -> syntax.error 'this operator is unary' f

PREFIX !! '~' = (self f _) -> syntax.error 'this operator is unary' f
INFIXL !! '~' = (self f _) -> syntax.error 'this operator is unary' f
INFIXR !! '~' = (self _ q) -> self.loadop 'UNARY_INVERT'   q delta: 1
INFIXR !! '-' = (self _ q) -> self.loadop 'UNARY_NEGATIVE' q delta: 1

PREFIX !! '@' = (self f _) -> syntax.error 'this operator is unary'  f
INFIXL !! '@' = (self f _) -> syntax.error 'this operator is prefix' f
INFIXR !! '@' = (self f q) ->
  q :: parse.Link or syntax.error 'not an attribute' q
  self.loadop 'LOAD_ATTR' ((parse.Link 'self').after f) arg: q delta: 1


INFIXL !! '->' = (self f q) -> self.function q ((parse.Constant None).after f)
INFIXR !! '->' = (self f q) -> self.function ((parse.Constant None).after f) q

INFIXL !! '~>' = (self f q) -> (PREFIX !! '~>') self f (q, (parse.Constant None).after f)
INFIXR !! '~>' = (self f q) -> (PREFIX !! '~>') self f ((parse.Constant None).after f, q)
