imp            = new import
sys            = new import
marshal        = new import
os.path        = new import
itertools      = new import
importlib.util = new import


..parse   = new import
..compile = new import


sys.meta_path.insert 0 $ inherit str $

  find_module = classmethod $ (cls, mod, path: None) ->
    name = mod.rsplit '.' 1 !! -1
    mods = itertools.chain.from_iterable $ map
      dir ->
        base = os.path.join dir name
        os.path.join base '__init__.dg',  base + '.dg'
      filter os.path.isdir $ map os.path.abspath (sys.path if path is None else path)

    unsafe
      e = cls $ next $ filter os.path.isfile mods
      e :: StopIteration = None

  is_package = (self, name) ->
    name.rsplit '.' 1 !! -1 != (os.path.basename self).rsplit '.' 1 !! 0

  get_code = (self, name) ->
    cache = imp.cache_from_source self
    code  = unsafe
      e =
        marshal.load $ open cache 'rb' if (os.stat self).st_mtime <= (os.stat cache).st_mtime
      e :: Exception = None

    code or
      code = compile.it $ parse.fd $ open $ str self

      os.makedirs (os.path.dirname cache) exist_ok: True
      marshal.dump code $ open cache 'wb'
      code

  load_module = importlib.util.module_for_loader $ (self, module) ->
    init = (module.__name__.rpartition '.' !! 0) or None
    code = self.get_code module.__name__

    module.__file__    = self
    module.__path__    = list' $ os.path.dirname self if self.is_package module.__name__
    module.__loader__  = self
    module.__package__ = (module.__name__ if self.is_package module.__name__ else init)

    eval code module.__dict__
    module
