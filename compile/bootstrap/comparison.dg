..compile = import!
..parse   = import!


# Translate `a R b Q c` into `(a R b) and (b Q c)`
# iff both `R` and `Q` are comparison operators, but without
# evaluating `b` twice.
#
# (Yes, Python compiler generates the same bytecode.)
#
comparison = (operator self a b chained: False) ->
  a_is_cmpop = a :: parse.tree.Expression and not a.closed and
    e, *ex = a
    e :: parse.tree.Link and e in compile.r.builtins and
      f = compile.r.builtins !! e
      f :: bind and f.func is comparison

  # If `a` is not a comparison (or is closed), simply load it.
  a_is_cmpop or
    self.load a
    jmps = list!
  # Otherwise, call `varary_op` with `chained` set to True.
  jmps = f self *: ex chained: True if a_is_cmpop

  chained and
    jmps.append $
      self.opcode 'DUP_TOP' b delta: 2
      self.opcode 'ROT_THREE' delta: 0
      self.opcode 'COMPARE_OP' arg: operator delta: -1
      self.opcode 'JUMP_IF_FALSE_OR_POP' delta: -1

  chained or
    self.opcode 'COMPARE_OP' b arg: operator delta: 0

    jmps and
      jmp = self.opcode 'JUMP_FORWARD' delta: 0
      list (map call jmps)
      # Exceptional case: one of the comparisons returned False.
      # We should remove the right-hand statement from the stack, though.
      self.opcode 'ROT_TWO' delta: 0
      self.opcode 'POP_TOP' delta: 0  # that -1 was accounted for by JUMP_IF_FALSE_OR_POP
      jmp!

  jmps


compile.r.builtins !! '<'   = bind comparison '<'
compile.r.builtins !! '<='  = bind comparison '<='
compile.r.builtins !! '=='  = bind comparison '=='
compile.r.builtins !! '!='  = bind comparison '!='
compile.r.builtins !! '>'   = bind comparison '>'
compile.r.builtins !! '>='  = bind comparison '>='
compile.r.builtins !! 'is'  = bind comparison 'is'
compile.r.builtins !! 'in'  = bind comparison 'in'
