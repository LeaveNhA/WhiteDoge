import '../compile'
import '../parse'
import '../const'


switch_s = cases -> list $ map
  bind parse.syntax.binary_op '=' on_error:
    bind parse.syntax.error const.ERR.INVALID_STMT_IN_SWITCH
  cases


#
# a if b else c
#
# Obvious ternary conditional.
#
compile.r.builtins !! 'else' = (self cond otherwise) ->
  then, cond = parse.syntax.binary_op 'if' cond
    bind parse.syntax.error const.ERR.NOT_AFTER_IF
  ptr = self.opcode 'POP_JUMP_IF_FALSE' cond delta: 0
  jmp = self.opcode 'JUMP_FORWARD'      then delta: 0

  ptr!
  self.load otherwise
  jmp!


#
# switch
#   condition1 = when_condition1_is_true
#   ...
#   conditionN = when_conditionN_is_true
#
# Evaluate the first action assigned to a true condition.
# `if-elif` is probably a better equivalent than `switch-case`.
#
compile.r.builtins !! 'switch' = (self *: cases) ->
  jumps = list $ map c -> (
    cond, action = c
    next = self.opcode 'POP_JUMP_IF_FALSE' cond delta: 0
    end  = self.opcode 'JUMP_FORWARD'    action delta: 0
    next!
    end
  ) $ switch_s cases

  self.load None  # in case nothing matched
  list $ map call jumps
