import '../compile'
import '../parse'
import '../const'


stacked = (c self a b) -> self.opcode c a b delta: 1
inplace = (c self a b) ->
  self.opcode c a b delta: 1
  self.store_top a


# NOTE ',' is unfixed
compile.r.builtins !! ',' = (self *: xs) -> self.opcode 'BUILD_TUPLE' *: xs delta: 1
compile.r.builtins !! '$' = (self a b) ->
  is_call = a :: parse.tree.Expression and not a.closed and self.builtins.get (a !! 0) is compile.r.call
  self.call a b          if not is_call
  self.call *: (a + list' b) if is_call

compile.r.builtins !! '!!'  = bind stacked 'BINARY_SUBSCR'
compile.r.builtins !! '+'   = bind stacked 'BINARY_ADD'
compile.r.builtins !! '-'   = bind stacked 'BINARY_SUBTRACT'
compile.r.builtins !! '*'   = bind stacked 'BINARY_MULTIPLY'
compile.r.builtins !! '**'  = bind stacked 'BINARY_POWER'
compile.r.builtins !! '/'   = bind stacked 'BINARY_TRUE_DIVIDE'
compile.r.builtins !! '//'  = bind stacked 'BINARY_FLOOR_DIVIDE'
compile.r.builtins !! '%'   = bind stacked 'BINARY_MODULO'
compile.r.builtins !! '&'   = bind stacked 'BINARY_AND'
compile.r.builtins !! '^'   = bind stacked 'BINARY_XOR'
compile.r.builtins !! '|'   = bind stacked 'BINARY_OR'
compile.r.builtins !! '<<'  = bind stacked 'BINARY_LSHIFT'
compile.r.builtins !! '>>'  = bind stacked 'BINARY_RSHIFT'

compile.r.builtins !! '!!=' = bind inplace 'BINARY_SUBSCR'
compile.r.builtins !! '+='  = bind inplace 'INPLACE_ADD'
compile.r.builtins !! '-='  = bind inplace 'INPLACE_SUBTRACT'
compile.r.builtins !! '*='  = bind inplace 'INPLACE_MULTIPLY'
compile.r.builtins !! '**=' = bind inplace 'INPLACE_POWER'
compile.r.builtins !! '/='  = bind inplace 'INPLACE_TRUE_DIVIDE'
compile.r.builtins !! '//=' = bind inplace 'INPLACE_FLOOR_DIVIDE'
compile.r.builtins !! '%='  = bind inplace 'INPLACE_MODULO'
compile.r.builtins !! '&='  = bind inplace 'INPLACE_AND'
compile.r.builtins !! '^='  = bind inplace 'INPLACE_XOR'
compile.r.builtins !! '|='  = bind inplace 'INPLACE_OR'
compile.r.builtins !! '<<=' = bind inplace 'INPLACE_LSHIFT'
compile.r.builtins !! '>>=' = bind inplace 'INPLACE_RSHIFT'

compile.r.builtins !! '!!~' = (self a b) -> self.opcode 'DELETE_SUBSCR' None a b delta: 1
compile.r.builtins !! '.~'  = (self a b) ->
  parse.syntax.error const.ERR.NONCONST_ATTR b if not (b :: parse.tree.Link)
  self.opcode 'DELETE_ATTR' None a arg: b delta: 1

compile.r.builtins !! '!.'  = (self a b) ->
  self.call   a
  self.ldattr b
