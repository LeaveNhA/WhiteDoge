..const        = import:
..compile      = import:
..parse.tree   = import:
..parse.syntax = import:

ST_EXPR_IF      = parse.syntax.MATCH_A $ parse.tree.Expression: (parse.tree.Link: 'if',     parse.syntax.ANY, parse.syntax.ANY)
ST_EXPR_UNLESS  = parse.syntax.MATCH_A $ parse.tree.Expression: (parse.tree.Link: 'unless', parse.syntax.ANY, parse.syntax.ANY)


else_s = cond ->
  args1 = ST_EXPR_IF:     cond
  args2 = ST_EXPR_UNLESS: cond
  parse.syntax.error: const.ERR.NOT_AFTER_IF cond unless args1 or args2
  args1, args1 or args2


switch_s = cases ->
  parsed = list $ map: parse.syntax.ST_ASSIGN $ parse.syntax.ST_BREAK: cases
  not_eq = map: x -> (x !! 1) $ filter: x -> (not $ x !! 0) $ zip: parsed $ parse.syntax.ST_BREAK: cases
  parse.syntax.error: const.ERR.INVALID_STMT_IN_SWITCH (next: not_eq) unless all: parsed
  parsed


#
# a if b else c
# a unless b else c
#
# Obvious ternary conditional.
#
compile.r.builtins !! 'else' = (self, cond, otherwise) ->
  is_if, (then, cond) = else_s: cond
  ptr = self.opcode: 'POP_JUMP_IF_FALSE' cond delta: 0 if     is_if
  ptr = self.opcode: 'POP_JUMP_IF_TRUE'  cond delta: 0 unless is_if
  jmp = self.opcode: 'JUMP_FORWARD'      then delta: 0

  ptr:
  self.load: otherwise
  jmp:


#
# switch $
#   condition1 = when_condition1_is_true
#   ...
#   conditionN = when_conditionN_is_true
#
# Evaluate the first action assigned to a true condition.
# `if-elif` is probably a better equivalent than `switch-case`.
#
compile.r.builtins !! 'switch' = (self, cases) ->
  jumps = list $ map: c -> (
    cond, action = c
    next = self.opcode: 'POP_JUMP_IF_FALSE' cond delta: 0
    end  = self.opcode: 'JUMP_FORWARD'    action delta: 0
    next:
    end
  ) $ switch_s: cases

  self.load: None  # in case nothing matched
  list $ map: (:) jumps
