builtins  = import!
operator  = import!
functools = import!
itertools = import!
importlib = import!


# Shorthand type constructors (e.g. `set' a b`  <=> `set (a, b)`.)
# These allow to use line continuation neatly.
builtins.set'   = (*: xs) -> set  xs
builtins.list'  = (*: xs) -> list xs
builtins.dict'  = (*: xs **: ys) -> dict xs **: ys

builtins.import = importlib.import_module
builtins.bind   = functools.partial
builtins.foldl  = (f st xs) -> functools.reduce f xs st
builtins.foldl1 = (f xs)    -> functools.reduce f xs
builtins.scanl  = (f st xs) -> itertools.accumulate (itertools.chain (list' st) xs) f
builtins.scanl1 = (f xs)    -> itertools.accumulate xs f
# FIXME should also define foldr and scanr.
builtins.flip   = f -> (x y) -> f y x

builtins.call = builtins.(!) = builtins.($) = (f *: xs) -> f *: xs
builtins.(,)  = builtins.tuple' = (*: xs) -> xs

builtins.(<)  = operator.lt
builtins.(<=) = operator.le
builtins.(==) = operator.eq
builtins.(!=) = operator.ne
builtins.(>)  = operator.gt
builtins.(>=) = operator.ge
builtins.(is) = operator.is_
builtins.(in) = flip operator.contains

builtins.not  = operator.not_
builtins.(~)  = operator.invert
builtins.(+)  = operator.add
builtins.(-)  = operator.sub
builtins.(*)  = operator.mul
builtins.(**) = operator.pow
builtins.(/)  = operator.truediv
builtins.(//) = operator.floordiv
builtins.(%)  = operator.mod
builtins.(.)  = getattr
builtins.(!!) = operator.getitem
builtins.(&)  = operator.and_
builtins.(^)  = operator.xor
builtins.(|)  = operator.or_
builtins.(<<) = operator.lshift
builtins.(>>) = operator.rshift

builtins.(.~)  = delattr
builtins.(!!~) = operator.delitem

# Not-actually-operators.
builtins.(...)  = Ellipsis
builtins.(..)   = range
builtins.(::)   = (a *: xs) -> a `isinstance` xs
