import '../core/CodeGenerator'

inf = float 'inf'  # `inherit` accepts any number of arguments >= 1

#
# inherit: ... block
#
# Create a class with `block` as its body.
# All arguments but the last one are passed straight to the `__build_class__`
# function.
#
PREFIX !! 'inherit' = (self f args) ->
  (*args, body), _, _, _ = unpack f args 1 inf

  # __build_class__ will also need a `dict -> cell` function.
  name = self.child_name '<class>'
  code = CodeGenerator name self.qualname True args: (list' '__locals__') cell: self
  code.cellhook = code -> code.freevars !! '__class__'
  code.cellvars !! '__class__'
  code.varnames !! '__class__'

  # The argument, __locals__, is what we need to write attributes to.
  code.loadop 'LOAD_FAST'    arg: '__locals__' delta:  1
  code.loadop 'STORE_LOCALS'                   delta: -1
  code.loadop 'LOAD_NAME'    arg: '__name__'   delta:  1
  code.loadop 'STORE_NAME'   arg: '__module__' delta: -1
  code.loadop 'POP_TOP'      body              delta:  0
  # The return value is a __class__ cell, if any.
  # Python compiler returns None instead if there are no instance methods.
  code.loadop 'LOAD_CLOSURE' arg: '__class__'  delta:  1
  code.loadop 'RETURN_VALUE'                   delta: -1

  self.loadop 'LOAD_BUILD_CLASS' delta: 1
  self.make_function code.compiled tuple! dict!
  self.nativecall code.qualname args 2 False
