import '/builtins'
import '/functools'
import '/itertools'
import '/collections'


builtins.foldl  = (f st xs) -> functools.reduce f xs st
builtins.foldl1 = (f xs)    -> functools.reduce f xs
builtins.scanl  = (f st xs) -> itertools.accumulate (itertools.chain (list' st) xs) f
builtins.scanl1 = (f xs)    -> itertools.accumulate xs f
# FIXME should also define foldr and scanr.
builtins.(<-)   = (f g) -> (*: a **: k) -> f $ g *: a **: k

builtins.exhaust   = bind collections.deque maxlen: 0
builtins.for       = exhaust <- flip map
builtins.iterate   = (f x) -> while True (yield x) (x = f x)
builtins.takewhile = itertools.takewhile
builtins.dropwhile = itertools.dropwhile
builtins.take      = (n xs) -> itertools.islice xs None n
builtins.drop      = (n xs) -> itertools.islice xs n None

builtins.head = next <- iter
builtins.tail = list <- bind drop 1
builtins.fst  = head
builtins.snd  = head <- tail
# FIXME should also work on iterables somehow
builtins.init = (!! slice None -1)
builtins.last = (!! -1)
