dis       = import!
builtins  = import!
functools = import!
itertools = import!


builtins.foldl  = (f st xs) -> functools.reduce f xs st
builtins.foldl1 = (f xs)    -> functools.reduce f xs
builtins.scanl  = (f st xs) -> itertools.accumulate (itertools.chain (list' st) xs) f
builtins.scanl1 = (f xs)    -> itertools.accumulate xs f
# FIXME should also define foldr and scanr.
builtins.(<-)   = (f g) -> (*: a **: k) -> f $ g *: a **: k

builtins.iterate   = (f x) -> while True (yield x) (x = f x)
builtins.takewhile = itertools.takewhile
builtins.dropwhile = itertools.dropwhile
builtins.take      = (n xs) -> itertools.islice xs None n
builtins.drop      = (n xs) -> itertools.islice xs n None


builtins.PatternMatchError = inherit TypeError $

  __init__ = (self expected received) ->
    super!.__init__ expected received
    self.expected = expected
    self.received = received
    None

  __str__ = self -> 'got {0.received!r} instead of {0.expected!r}'.format self


builtins.fallthrough = (*: fs) -> (*: args **: kwargs) ->
  next $ map (!! 1) $ dropwhile (!! 0) $ map
    f ->
      unsafe
        e = False, f *: args **: kwargs
        e =
          offset = e.__traceback__.tb_next.tb_frame.f_lasti
          raise e unless offset < f.__code__.co_code.find (dis.opmap !! 'NOP')
          True, None;
    fs
