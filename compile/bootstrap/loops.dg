builtins    = new import
collections = new import

..compile    = new import
..parse.tree = new import


#
# while condition body...
#
# Evaluate the body while condition is true.
#
compile.r.builtins !! 'while' = (self cond *: block) ->
  self.load None
  exit_ptr = self.opcode 'SETUP_LOOP'             delta: 0
  cond_ptr = self.opcode 'JUMP_ABSOLUTE'  arg: -1 delta: 0
  else_ptr = self.opcode 'POP_JUMP_IF_FALSE' cond delta: 0
  self.chain *: block if block
  self.opcode 'ROT_TWO' delta:  0
  self.opcode 'POP_TOP' delta: -1
  call cond_ptr
  call else_ptr
  self.opcode 'POP_BLOCK' delta: 0
  call exit_ptr


#
# object.for
#
# Alias for `bind: for object`.
#
compile.r.fake_attrs !! 'for' = self ->
  self.opcode 'ROT_TWO' delta: 1 $ parse.tree.Link $ 'bind'
  self.opcode 'ROT_TWO' delta: 1 $ parse.tree.Link $ 'for'
  self.opcode 'CALL_FUNCTION' arg: 2 delta: -2


#
# exhaust: iterable
#
# Fetch items from an iterable until it's exhausted.
#
builtins.exhaust = bind collections.deque maxlen: 0

#
# for: iterable function
#
# Eagerly call function for each item of an iterable,
# then return the unmodified iterable.
#
builtins.for = (iterable function) ->
  exhaust $ map function iterable
  iterable
