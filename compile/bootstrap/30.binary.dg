binary  = g -> (self f xs) -> g self f *: (ensure f xs 2 2)
stacked = c -> binary (self _ a b) -> (self.loadop c a b delta: 1)
inplace = c -> binary (self _ a b) ->
  self.loadop c a b     delta: 1
  self.loadop 'DUP_TOP' delta: 1
  self.store_top a


# NOTE ',' is unfixed
PREFIX !! ',' = (self f xs) -> self.loadop 'BUILD_TUPLE' *: xs delta: 1
PREFIX !! '$' = binary (self f a b) ->
  switch
    a :: parse.Expression and not a.closed and a !! 0 == '' = self.call *: (a + list' b)
    True = self.call a b

PREFIX !! '!!'  = stacked 'BINARY_SUBSCR'
PREFIX !! '+'   = stacked 'BINARY_ADD'
PREFIX !! '-'   = stacked 'BINARY_SUBTRACT'
PREFIX !! '*'   = stacked 'BINARY_MULTIPLY'
PREFIX !! '**'  = stacked 'BINARY_POWER'
PREFIX !! '/'   = stacked 'BINARY_TRUE_DIVIDE'
PREFIX !! '//'  = stacked 'BINARY_FLOOR_DIVIDE'
PREFIX !! '%'   = stacked 'BINARY_MODULO'
PREFIX !! '&'   = stacked 'BINARY_AND'
PREFIX !! '^'   = stacked 'BINARY_XOR'
PREFIX !! '|'   = stacked 'BINARY_OR'
PREFIX !! '<<'  = stacked 'BINARY_LSHIFT'
PREFIX !! '>>'  = stacked 'BINARY_RSHIFT'

PREFIX !! '!!=' = inplace 'BINARY_SUBSCR'
PREFIX !! '+='  = inplace 'INPLACE_ADD'
PREFIX !! '-='  = inplace 'INPLACE_SUBTRACT'
PREFIX !! '*='  = inplace 'INPLACE_MULTIPLY'
PREFIX !! '**=' = inplace 'INPLACE_POWER'
PREFIX !! '/='  = inplace 'INPLACE_TRUE_DIVIDE'
PREFIX !! '//=' = inplace 'INPLACE_FLOOR_DIVIDE'
PREFIX !! '%='  = inplace 'INPLACE_MODULO'
PREFIX !! '&='  = inplace 'INPLACE_AND'
PREFIX !! '^='  = inplace 'INPLACE_XOR'
PREFIX !! '|='  = inplace 'INPLACE_OR'
PREFIX !! '<<=' = inplace 'INPLACE_LSHIFT'
PREFIX !! '>>=' = inplace 'INPLACE_RSHIFT'

PREFIX !! '!!~' = binary (self _ a b) -> (self.loadop 'DELETE_SUBSCR' None a b delta: 1)
PREFIX !! '.~'  = binary (self _ a b) ->
  b :: parse.Link or syntax.error 'not an attribute'
  self.loadop 'DELETE_ATTR' None a arg: b delta: 1

PREFIX !! '!.'  = binary (self _ a b) ->
  b :: parse.Link or syntax.error 'not an attribute'
  self.call a
  self.loadop 'LOAD_ATTR' arg: b delta: 0
