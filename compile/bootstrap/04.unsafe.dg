..const        = import
..compile      = import
..parse.syntax = import


callable = f -> (self, *args) ->
  posargs, kwargs, vararg, varkwarg = parse.syntax.call_args: args
  const.ERR.VARARG_WITH_BUILTIN if vararg or varkwarg
  f: self (*): posargs (**): kwargs


unsafe = cases ->
  cases = list $ map: parse.syntax.ST_ASSIGN $ parse.syntax.ST_BREAK: cases
  const.ERR.INVALID_STMT_IN_SWITCH unless all: cases
  const.ERR.DEFAULT                unless      cases

  cases.append: (None, None) if len: cases < 2 or not: (parse.syntax.ST_EXC_FINALLY $ cases !! -1 !! 0)
  cases


compile.r.builtins !! 'raise' = callable $ (self, exception, caused_by: (...)) ->
  '''
    raise: ExceptionType
    raise: exception_instance
    raise: ... caused_by: another_exception_or_Ellipsis_or_None

    Raise an exception. If the exception is a subclass of BaseException,
    instantiate it beforehand. If the `caused_by` argument is not an
    `Ellipsis`, make it the __cause__ of that exception.

    In CPython 3.3, `raise: exception caused_by: None` silences the context.

  '''

  args = (tuple: if caused_by `is` (...) else (caused_by,))
  self.opcode: 'RAISE_VARARGS' exception (*): args delta: 0
  self.load: None  # We've got to return something.


compile.r.builtins !! 'unsafe' = (self, cases) ->
  '''
    unsafe $
      error = unsafe_code
      condition1 = when_condition1_is_True
      ...
      conditionN = when_conditionN_is_True
      True = finally_clause

    Evaluate `unsafe_code`, storing the whatever exception is raised as
    `error`, then evaluating the first action to be assigned
    to a true condition. If no condition is true, the exception is re-raised.
    If there was no exception, `error` is set to `None`. If the last
    action is assigned to `True`, it is evaluated regardless of whether
    any other condition was True, but it can't silence the exception.

    Returns the value of `unsafe_code` if there was no exception,
    `None` otherwise.

  '''

  # http://i2.kym-cdn.com/photos/images/original/000/234/765/b7e.jpg
  # That seems to work, though.
  (name, try), *cases, (has_finally, finally) = unsafe: cases

  # This will be our return value.
  self.load: None

  to_finally = self.opcode: 'SETUP_FINALLY' delta: 0 if has_finally
  to_except  = self.opcode: 'SETUP_EXCEPT'  delta: 0
  # Replace that None with the value returned by `try_`
  # to fool the POP_BLOCK instruction.
  self.opcode: 'ROT_TWO' try delta:  1
  self.opcode: 'POP_BLOCK'   delta: -1
  # Er, so there was no exception, let's store None instead.
  # Since we've already POPped_BLOCK, exceptions occured
  # during this assignment won't be caught.
  self.store: name None

  # Jump over that block if there was no exception.
  # Finishing SETUP_EXCEPT with an exception pushes
  # 3 items onto the stack.
  #
  # Stack:: [try, None] or [None, traceback, value, type]
  #
  to_else = self.opcode: 'JUMP_FORWARD' delta: 2  # one is on the stack already
  to_except:
  self.opcode: 'ROT_TWO' delta: 0
  self.store_top: (*): (parse.syntax.assignment_target: name)
  self.opcode: 'ROT_TWO' delta: 0
  to_else:

  # The `switch` statement.
  # XXX is that considered "code duplication"?
  jumps = list $ map: c -> (
    cond, action = c
    next = self.opcode: 'POP_JUMP_IF_FALSE' cond delta: 0
    end  = self.opcode: 'JUMP_FORWARD'    action delta: 0
    next:
    end
  ) cases

  # This will re-raise the exception if nothing matched
  # (and there was an exception. And there is no `finally` clause.)
  self.opcode: 'END_FINALLY' delta: -3

  # The problem is, now we need to POP_EXCEPT, but only
  # if there was a handled exception.

  # First, jump over this whole part if the exception was not handled.
  unhandled_exception = self.opcode: 'JUMP_FORWARD' delta: 0

  # Second, check if the exception type is None, in which case
  # there was no exception at all.
  list $ map: (:) jumps
  self.opcode: 'POP_TOP' delta: 0  # that was pushed by a handler
  self.opcode: 'DUP_TOP' delta: 1
  self.opcode: 'COMPARE_OP' None arg: 'is' delta: 0
  # Then skip POP_EXCEPT if that is the case.
  no_exception = self.opcode: 'POP_JUMP_IF_TRUE' delta: -1

  self.opcode: 'POP_EXCEPT' delta: 0
  unhandled_exception:
  no_exception:

  has_finally and
    # If the interpreter made it here, one of the `except` clauses matched.
    self.opcode: 'POP_BLOCK' delta: -1
    self.load: None

    to_finally:
    self.opcode: 'POP_TOP' finally delta: 0
    self.opcode: 'END_FINALLY'     delta: 0

  # We should be left with a return value by now.
