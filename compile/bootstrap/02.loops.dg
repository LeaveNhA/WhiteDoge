builtins    = import:
itertools   = import:
collections = import:

..const      = import:
..compile    = import:
..parse.tree = import:


#
# while: condition body
#
# Evaluate the body while condition is true.
#
compile.r.builtins !! 'while' = (self, cond, block) ->
  self.load: None
  exit_ptr = self.opcode: 'SETUP_LOOP'             delta: 0
  cond_ptr = self.opcode: 'JUMP_ABSOLUTE'  arg: -1 delta: 0
  else_ptr = self.opcode: 'POP_JUMP_IF_FALSE' cond delta: 0
  self.opcode: 'ROT_TWO' block delta:  1
  self.opcode: 'POP_TOP'       delta: -1
  cond_ptr:
  else_ptr:
  self.opcode: 'POP_BLOCK' delta: 0
  exit_ptr:


#
# object.for
#
# Alias for `bind: for object`.
#
compile.r.fake_attrs !! 'for' = self ->
  self.opcode: 'ROT_TWO' delta: 1 $ parse.tree.Link $ '~:'
  self.opcode: 'ROT_TWO' delta: 1 $ parse.tree.Link $ 'for'
  self.opcode: 'CALL_FUNCTION' arg: 2 delta: -2


#
# exhaust: iterable
#
# Fetch items from an iterable until it's exhausted; return the last one.
#
builtins.exhaust = iterable ->
  (collections.deque: iterable maxlen: 1) !! 0

#
# for: iterable function
#
# Eagerly call function for each item of an iterable,
# then return the unmodified iterable.
#
builtins.for = (iterable, function) ->
  exhaust $ map: function iterable
  iterable
