import '/os'
import '/time'
import '/fcntl'
import '/struct'
import '/select'
import '/termios'
import '/contextlib'

import 'ansi/Sequence'


Teletype = subclass object where
  #: Various TTY-related functions.
  #:
  #: input  :: TextIOBase -- 'r'-mode TTY.
  #: output :: TextIOBase -- 'w'-mode TTY.
  #:
  __init__ = @input @output @name: None ~>
    not @input .isatty! => raise $ IOError 'input: not a tty'
    not @output.isatty! => raise $ IOError 'output: not a tty'
    None

  fileno = ~> @input.fileno
  read   = ~> @input.read
  write  = ~> @output.write
  flush  = ~> @output.flush

  #: Determine the length of an ANSI-escaped string. ANSI escapes are assumed to be empty.
  #:
  #: ansi_len :: str -> int
  #:
  ansi_len = classmethod $ data ~> len $ Sequence.sub '' data

  #: Check whether a key's value is printable.
  #:
  #: printable :: str -> bool
  #:
  printable = classmethod $ data ~> if
    len data == 0 => True
    len data >= 2 => False  # only ANSI sequences match this
    otherwise     => 32 <= ord data < 127 or 160 <= ord data

  #: Iterate over keypresses until EOL.
  #:
  #: line :: float -> iter str
  #:
  line = timeout ~>
    end = time.time! + timeout
    while (c = @key $ if
      timeout   => end - time.time!
      otherwise => 0) != '\n' => yield c

  #: Enter the raw mode of a TTY.
  #:
  #: raw :: bool bool :: Context NoneType
  #:
  raw = contextlib.contextmanager $ jobctl flowctl ~>
    old = termios.tcgetattr @input
    new = termios.tcgetattr @input
    new !! 0 &= ~(termios.ISTRIP | termios.IXON)
    new !! 3 &= ~(termios.ECHO   | termios.ICANON | termios.IEXTEN | termios.ISIG)
    if flowctl => new !! 0 |= termios.IXON
    if jobctl  => new !! 3 |= termios.ISIG
    except error   => yield $ termios.tcsetattr @input termios.TCSADRAIN new
           finally =>         termios.tcsetattr @input termios.TCSAFLUSH old

  #: Find out how much stuff this TTY can display at once.
  #:
  #: size :: (int, int)
  #:
  size = ~>
    # FIXME what would happen if a Windows SSH client connects to a UNIX server?
    #   I sure hope that client emulates UNIX terminals.
    struct.unpack 'hh' $ fcntl.ioctl @output termios.TIOCGWINSZ '1234'

  #: Get a single keypress from this TTY.
  #:
  #: key :: int -> str
  #:
  key = timeout ~> c where
    timeout => not $ fst $ select.select (@input,) () () timeout => raise BlockingIOError
    c = @read 1
    c == '\033' =>
      c += @read 1  # Assume ANSI escapes appear instantaneously.
      c == '\033N' => c += @read 1  # alternate character set 1
      c == '\033O' => c += @read 1  # alternate character set 2
      c == '\033[' =>  # ANSI CSI
        c += @read 1
        while not $ '@' <= last c <= '~' => c += @read 1

  #: Move the caret `y` characters down and `x` characters to the right.
  #:
  #: relmove :: int int -> a
  #:
  relmove = y x ~> @write $ (+)
    if y > 0     => '\033[{}B'.format y
       y < 0     => '\033[{}A'.format (-y)
       otherwise => ''  # If `y` is 0, terminals might assume 1.
    if x > 0     => '\033[{}C'.format x
       x < 0     => '\033[{}D'.format (-x)
       otherwise => ''

  #: Erase everything from the cursor to the end of the screen.
  #:
  #: erase :: a
  #:
  erase = ~> @write '\033[J'
