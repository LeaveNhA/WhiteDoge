import '/sys'
import '/runpy'

import '/dg'
import '/dg/core'
import '/dg/addon/repl'


USAGE = '''
Usage:

  python3 -m dg [-h | -b | -c command | -m module | file] ...'

Options and arguments:

  -h           show this message and exit
  -b           rebootstrap the compiler
  -c command   run a single command, then exit
  -m module    run a module (or a package's `__main__`) as a script
  file         run a script
  ...          additional arguments accessible through `sys.argv`

Environment variables:

  PYTHONSTARTUP     a Python file executed on interactive startup
  PYTHONSTARTUPDG   same as PYTHONSTARTUP, only in dg
'''


_run = fd -> if
  fd.isatty! => repl.runrepl fd startup: (fd is sys.stdin)
  otherwise  => repl.runcode $ dg.compilefd fd fd.name


_arg = -> if
  len sys.argv > 1 => sys.argv.pop 1
  otherwise        => exit $ 'error: {[0]} requires an argument'.format sys.argv


sys.argv.pop 0
sys.argv = sys.argv or list' ''

if head sys.argv == '-h' => print USAGE
   head sys.argv == '-b' =>
     this = core.load       dg.PY_TAG dg.BUNDLE_DIR
     this = core.build this dg.PY_TAG dg.PY_VERSION  # build new features
     this = core.build this dg.PY_TAG dg.PY_VERSION  # apply new features to itself
     this = core.build this dg.PY_TAG dg.PY_VERSION  # self-test
     core.save (list this)  dg.PY_TAG dg.BUNDLE_DIR

   head sys.argv == '-m' => runpy.run_module _arg! None '__main__' True
   head sys.argv == '-c' => repl.runcode $ dg.compile _arg! '<string>'
   head sys.argv == ''   => _run sys.stdin
   otherwise             => _run $ open encoding: 'utf-8' $ head sys.argv
