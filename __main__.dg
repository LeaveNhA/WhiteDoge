import '/os'
import '/sys'
import '/argparse'
import '/builtins'

import 'parse'
import 'compile'


argp = argparse.ArgumentParser prog: 'dg' description: 'An infix LISP atop CPython.'
argp.add_argument 'source' metavar: 'file' nargs: '?'   help: 'file to execute' type: open default: sys.stdin
argp.add_argument 'args'   metavar: '...'  nargs: '...' help: 'additional arguments (sys.argv[1:])'

ns  = argp.parse_args!
env = dict __name__: '__main__' __builtins__: __builtins__

sys.argv = ns.args
sys.argv.insert 0 ('' if ns.source is sys.stdin else ns.source.name)

ns.source.isatty! or
  eval (compile.fd ns.source) env
  exit 0


# command :: str -> Maybe code
#
# Compile some code if it's a complete statement in an interactive shell.
#
command = code -> unsafe
  e =
    res  = parse.it code '<stdin>'
    expr = next $ dropwhile e -> (e :: parse.Expression and not e.closed) $ iterate last res

    # Tap `Return` twice to override any of these checks.
    res if code.endswith '\n' or not
      # There may be an indented block in the next line if
      #     1. the last operator has no right-hand side;
      expr :: parse.Expression and len expr == 2 or
        #   2. the last expression is accessing a built-in, which
        #      doesn't make sense (unlike a call to that built-in;)
        expr :: parse.Link and not expr.closed and expr in compile.core.PREFIX or
          # 3. the last line of the code is indented.
          (last $ code.rsplit '\n' 1).startswith ' '

  # Open strings or blocks may be continued, too. (Tapping `Return` won't help.)
  e :: SyntaxError and (head e.args).startswith 'unexpected EOF' = None

st = os.environ.get 'PYTHONSTARTUP' ''
eval (builtins.compile ((open st).read -1) st 'exec') env if st and ns.source is sys.stdin

sys.stdin = ns.source
sys.ps1 = getattr sys 'ps1' '>>> '
sys.ps2 = getattr sys 'ps2' '... '

while True $ unsafe
  e = sys.displayhook $ eval
    compile.ast $ next $ dropwhile not $ map command $ iterate x -> (x + '\n' + input sys.ps2) $ input sys.ps1
    env
  e :: EOFError   = raise SystemExit
  e :: SystemExit = raise e
  e = sys.excepthook (type e) e e.__traceback__.tb_next
