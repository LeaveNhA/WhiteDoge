'''Scala-style underscore.

  import '/dg/contrib/underscore/_'
  # `f` and `g` are equivalent.
  f = _ * 5 + _.fget.call _
  g = x y z -> x * 5 + y.fget z

'''

ArityError = subclass TypeError where
  __str__ = self -> '{} expected {} argument(s), got {}'.format *: @args


f = n g -> *: xs -> Fn
  q -> (g *: (map (x -> if (x :: Fn => x.func q) (otherwise => x)) xs))
  '(' + n + ' ' + ' '.join (map repr xs) + ')'
  sum $ map (x -> x :: Fn and x.arity) xs


Fn = subclass object where
  __init__ = @func @format @arity ~> None
  __repr__ = self -> @format

  __call__ = *: args ~>
    @arity != len args => raise $ ArityError @format @arity (len args)
    @func $ iter args

  call          = f 'call'    call
  __divmod__    = f 'divmod'  divmod
  __getattr__   = f 'getattr' getattr
  __getitem__   = f '(!!)'    (!!)
  __add__       = f '(+)'     (+)
  __mul__       = f '(*)'     (*)
  __sub__       = f '(-)'     (-)
  __pow__       = f '(**)'    (**)
  __truediv__   = f '(/)'     (/)
  __floordiv__  = f '(//)'    (//)
  __mod__       = f '(%)'     (%)
  __and__       = f '(&)'     (&)
  __or__        = f '(|)'     (|)
  __xor__       = f '(^)'     (^)
  __lshift__    = f '(<<)'    (<<)
  __rshift__    = f '(>>)'    (>>)
  __invert__    = f '~'       (~)
  __lt__        = f '(<)'     (<)
  __le__        = f '(<=)'    (<=)
  __gt__        = f '(>)'     (>)
  __ge__        = f '(>=)'    (>=)
  __eq__        = f '(==)'    (==)
  __ne__        = f '(!=)'    (!=)
  __rdivmod__   = f 'divmod' $ flip divmod
  __contains__  = f '(in)'   $ flip (in)
  __radd__      = f '(+)'    $ flip (+)
  __rmul__      = f '(*)'    $ flip (*)
  __rsub__      = f '(-)'    $ flip (-)
  __rpow__      = f '(**)'   $ flip (**)
  __rtruediv__  = f '(/)'    $ flip (/)
  __rfloordiv__ = f '(//)'   $ flip (//)
  __rmod__      = f '(%)'    $ flip (%)
  __rand__      = f '(&)'    $ flip (&)
  __ror__       = f '(|)'    $ flip (|)
  __rxor__      = f '(^)'    $ flip (^)
  __rlshift__   = f '(<<)'   $ flip (<<)
  __rrshift__   = f '(>>)'   $ flip (>>)


_ = Fn next '_' 1
