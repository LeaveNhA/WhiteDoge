import '/os'
import '/sys'
import '/builtins'

import '../parse'
import '../compile'


# command :: str -> Maybe code
#
# Compile some code if it's a complete statement in an interactive shell.
#
# .. seealso:: `code.compile_command`
#
command = code -> unsafe
  e =
    res  = parse.it code '<stdin>'
    expr = next $ dropwhile e -> (e :: parse.tree.Expression and not e.closed) $ iterate last res

    # There may be an indented block in the next line if
    #   1. the last operator has no right-hand side;
    fail = expr :: parse.tree.Expression and len expr == 2 or
           #   2. the last expression is accessing a built-in, which
           #      doesn't make sense (unlike a call to that built-in;)
           expr :: parse.tree.Link and not expr.closed and expr in compile.r.builtins or
           #   3. the last line of the code is indented.
            (last $ code.rsplit '\n' 1).startswith ' '

    # Tap `Return` twice to override any of the above checks.
    res if code.endswith '\n' or not fail

  # Open strings or block may be continued, too. (Tapping `Return` won't help.)
  e :: SyntaxError and (head e.args).startswith 'unexpected EOF' = None


# it :: TextIOBase -> _|_
#
# Evaluate the contents of a file, then exit.
#
it = fd ->
  st  = os.environ.get 'PYTHONSTARTUP' ''
  env = dict __name__: '__main__' __builtins__: __builtins__

  fd.isatty! or unsafe
    e =
      eval (compile.fd fd) env
      exit 0
    e :: Exception =
      sys.excepthook (type e) e e.__traceback__.tb_next
      exit 1

  # Interactive mode below.
  eval (builtins.compile ((open st).read -1) st 'exec') env if st and fd is sys.stdin

  sys.stdin = fd
  # These might have been set by PYTHONSTARTUP.
  sys.ps1 = getattr sys 'ps1' '>>> '
  sys.ps2 = getattr sys 'ps2' '... '

  while True $ unsafe
    e =
      buf = input sys.ps1
      res = next $ dropwhile not $ map command $ iterate x -> (x + '\n' + input sys.ps2) buf
      sys.displayhook $ eval (compile.it res) env
    # The empty line is purely for aesthetic purposes.
    e :: EOFError = print!, exit 0
    # Unlike the above code, we want to catch *everything* but `SystemExit`,
    # including `KeyboardInterrupt` and `GeneratorExit`.
    e :: SystemExit = raise e
    e = sys.excepthook (type e) e e.__traceback__.tb_next
