Generator.prefix !! 'where' = f args ~>
  end, start = ensure f args 2 2
  code = Generator (@child_name '<lambda>') True cell: self
  code.chain start end
  code.add_opcode 'RETURN_VALUE'
  @make_function code list! dict!
  @add_opcode 'CALL_FUNCTION' 0


Generator.prefix !! 'yield' = f args ~> unpack f args $ item: None from: None ->
  not $ from is None =>
    @load_ast from
    @add_opcode 'GET_ITER'
  if item is None => @load_const None
     otherwise    => @load_ast   item
  if from is None => @add_opcode 'YIELD_VALUE'
     otherwise    => @add_opcode 'YIELD_FROM'
  @currstack -= not $ from is None
  @flags |= CO_GENERATOR


Generator.prefix !! 'with' = f args ~>
  ctx, ast = ensure f args 2 2
  var, ctx = if
    ctx :: Expression and len ctx.args == 2 and ctx.op == '=' => ctx.args
    otherwise => Name '_', ctx

  @load_const None
  @load_ast   ctx
  @stackperm +3

  with @setup 'with' =>      #=> (None, __exit__, return value of __enter__)
    @store_ast var           #=> (None, __exit__)
    @load_ast  ast           #=> (None, __exit__, ast)
    @add_opcode 'ROT_THREE'  #=> (ast, None, __exit__)
    @add_opcode 'ROT_TWO'    #=> (ast, __exit__, None)
    @add_opcode 'POP_TOP'    #=> (ast, __exit__)
    @currstack -= 1
    @add_opcode 'POP_BLOCK'
    @load_const None

  @add_opcode 'WITH_CLEANUP'
  @add_opcode 'END_FINALLY'
  @currstack -= 4


Generator.prefix !! 'subclass' = f args ~>
  @stackperm +3
  @add_opcode 'LOAD_GLOBAL'   $ @names '__dg_build_class__'
  @add_opcode 'LOAD_GLOBAL'   $ @names '__name__'
  @add_opcode 'LOAD_GLOBAL'   $ @names 'locals'
  @add_opcode 'CALL_FUNCTION' 0
  # We'll take variables from this namespace, might as well take its docstring.
  @load_const $ if @consts and snd (head @consts) is str => fst $ head @consts
  @load_const @qualname
  @load_const @name
  @call_ast args 5


Generator.prefix !! 'while' = f args ~>
  cond, body = ensure f args 2 2
  @load_const None

  restart = @jump reverse: True
  @load_ast cond
  @currstack -= 1
  with @pop_jump_if False reverse: False =>
    @add_opcode 'POP_TOP'
    @currstack -= 1
    @load_ast body
    restart.set


Generator.prefix !! 'for' = f args ~>
  x, body = ensure f args 2 2
  not $ x :: Expression and x.op == 'in' and len x.args == 2 =>
    Parser.error 'only `a in b` is accepted (hint: check the parentheses)' x.loc
  k, v = x.args

  @load_const None
  @load_ast   v
  @add_opcode 'GET_ITER'
  restart = @jump reverse: True
  @stackperm +1
  with @setup 'for' =>
    @store_ast  k
    @load_ast   body
    @add_opcode 'ROT_THREE'
    @add_opcode 'ROT_TWO'
    @add_opcode 'POP_TOP'
    @currstack -= 2
    restart.set
