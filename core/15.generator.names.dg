# These constants, unless redefined in a function, will
# be loaded with LOAD_CONST, not LOAD_GLOBAL.
# FIXME what if one of them is redefined in a global namespace?
CONSTANTS = dict True: True False: False None: None otherwise: True

# String representation of the variable on the left side of
# the innermost assignment or None. (Used to calculate `name` and `qualname`.)
Generator.var = None


Generator.load = v ~>
  '''Push the value assigned to some name onto the value stack.

    load :: str -> a

  '''
  @stackperm +1

  if v in @cellvars => @add_opcode 'LOAD_DEREF'  $ @cellvars v
     v in @enclosed => @add_opcode 'LOAD_DEREF'  $ @freevars v
     v in CONSTANTS => @load_const $ CONSTANTS !! v
     @slowlocals    => @add_opcode 'LOAD_NAME'   $ @names    v
     otherwise      => @add_opcode 'LOAD_GLOBAL' $ @names    v


Generator.store = v ~>
  '''Store the value on top of the stack in a variable.

    store :: str -> a

  '''
  @currstack -= 1

  if v in @cellvars => @add_opcode 'STORE_DEREF' $ @cellvars v
     v in @enclosed => @add_opcode 'STORE_DEREF' $ @freevars v
     @slowlocals    => @add_opcode 'STORE_NAME'  $ @names    v
     otherwise      => @add_opcode 'STORE_DEREF' $ @cellvars v


Generator.load_closure = v ~>
  '''Load a cell object referencing some variable.

    load_closure :: str -> a

  '''
  @stackperm +1
  @add_opcode 'LOAD_CLOSURE' $ if v in @cellvars => @cellvars v
                                  otherwise      => @freevars v


Generator.child_name = fallback ~>
  '''Make a name for a child code object.

    fallback -- the name to use if the code object is not assigned to anything.

    child_name :: str -> str

  '''
  name = @var or fallback
  if str.isidentifier name or (name.startswith '<' and name.endswith '>') => name
     otherwise => '<' + name + '>'
