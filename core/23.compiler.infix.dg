### Part 5. Unsorted.

if_syntax = cases -> except
  e => list $ map
    x -> if
      x :: Expression and x.op == '=>' and len x.args == 2 => x.args
      otherwise => ERROR x '`if` expected (condition => action) pairs'
    cases
  e :: SyntaxError and len cases == 1 and head cases :: Expression and (head cases).op == '' =>
    if_syntax $ (head cases).args


Compiler.prefix !! 'if' = f xs ~>
  jumps = list
    where for (cond, action) in if_syntax xs =>
      @pushast cond
      with @jump 'POP_JUMP_IF_FALSE' delta: -1 =>
        @pushast action
        yield $ @jump 'JUMP_FORWARD' delta: -1
  @pushconst None
  for x in jumps => x.set
