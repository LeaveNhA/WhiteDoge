import '/sys'
import '/types'
import '/builtins'
import '/operator'
import '/functools'
import '/itertools'
import '/collections'
import '/importlib/util'
import '/importlib/machinery'


BUILTINS = dict!
BUILTINS !! 'otherwise' = True  # it's in CONSTANTS, cannot assign to it
BUILTINS !! 'finally'   = True  # not actually used
BUILTINS.update locals! where
  set'   = *: xs       -> set  xs
  list'  = *: xs       -> list xs
  dict'  = *: xs **: k -> dict xs **: k
  tuple' = , = *: xs -> xs

  bind  = functools.partial
  flip  = f -> x y -> f y x
  ! = $ = f *: a **: k -> f *: a **: k
  <-    = f g -> *: a **: k -> f $ g *: a **: k

  ..  = range
  ... = Ellipsis
  ::  = isinstance
  ->  = -> None
  ~>  = ~> None
  :+  = a b -> itertools.chain (a,) b
  +:  = a b -> itertools.chain a (b,)
  in  = a b -> a in b
  is  = operator.is_
  not = operator.not_
  <   = operator.lt
  <=  = operator.le
  ==  = operator.eq
  !=  = operator.ne
  >=  = operator.ge
  >   = operator.gt
  ~   = operator.invert
  +   = operator.add
  -   = operator.sub
  *   = operator.mul
  **  = operator.pow
  /   = operator.truediv
  //  = operator.floordiv
  %   = operator.mod
  &   = operator.and_
  ^   = operator.xor
  |   = operator.or_
  <<  = operator.lshift
  >>  = operator.rshift
  !!  = operator.getitem
  !!~ = operator.delitem

  take      = n xs -> itertools.islice xs None n
  drop      = n xs -> itertools.islice xs n None
  takewhile = itertools.takewhile
  dropwhile = itertools.dropwhile
  exhaust   = x -> collections.deque x maxlen: 0
  iterate   = f x -> while True =>
    yield x
    x = f x

  foldl  = f st xs -> functools.reduce f xs st
  foldl1 = f    xs -> functools.reduce f xs
  scanl  = f st xs -> itertools.accumulate (st:+xs) f
  scanl1 = f    xs -> itertools.accumulate xs f
  # FIXME should also define foldr(1) and scanr(1). Probably.

  head = xs -> next $ iter xs
  fst  = xs -> next $ iter xs  # same as `head`, but with a different name
  snd  = xs -> head $ drop 1 xs
  tail = xs -> list $ drop 1 xs
  init = !! slice None -1
  last = !! -1

  #: A version of __build_class__ that does not use functions.
  #:
  #: I bet you didn't even know __build_class__ existed.
  #:
  #: _ :: str (dict str object) (Maybe str) str str *type **(dict str object) -> type
  #:
  __dg_build_class__ = module attrs doc qualname name *: bases **: kwds ->
    types.new_class name bases kwds $ ns ->
      ns.update attrs
      ns.update $ dict __doc__: doc __qualname__: qualname __module__: module

  InstancePatternError = subclass ValueError where
  ConstantPatternError = subclass ValueError where

globals!.update BUILTINS


ModuleLoader = subclass machinery.SourceFileLoader where
  source_to_code = data filename ~> compile (data.decode 'utf-8') filename
  exec_module = module ~>
    module.__dict__.update BUILTINS
    (super ModuleLoader self).exec_module module

# This time we want to add `.dg` to the list of extensions findable
# by `FileFinder`. Too bad the path hook is not a class, but a closure.
sys.path_importer_cache.clear!
sys.path_hooks.append $ machinery.FileFinder.path_hook (ModuleLoader, list' '.dg') *:
  (last (sys.path_hooks.pop -1).__closure__).cell_contents
# This module is used by runpy to execute modules as `__main__`.
# It's not imported through `ModuleLoader`, so we'll have to do this:
(sys.modules !! '__main__').__dict__.update BUILTINS
