import '/dis'
import '/types'
import '/struct'
import '/collections'

#: These constants, unless redefined in a function, will
#: be loaded with LOAD_CONST, not LOAD_GLOBAL.
#: FIXME what if one of them is redefined in a global namespace?
CONSTANTS = dict True: True False: False None: None otherwise: True


#: Calculate the length of a bytecode sequence, in bytes.
#:
#: codelen :: [(int, int)] -> int
#:
codelen = seq -> sum $ map
  (c, v) -> if
    c < dis.HAVE_ARGUMENT => 1
    otherwise             => 3 * (1 + abs (v.bit_length! - 1) // 16)
  seq


#: An argument to a jump opcode.
#:
#: type Jump where
#:   code     :: CodeType  -- bytecode to insert a jump into.
#:   start    :: int       -- offset at which the jump object was created.
#:   op       :: str       -- instruction to insert.
#:   relative :: bool      -- whether to start counting from `start`.
#:   reverse  :: bool      -- ask questions first, insert later. Implies `absolute`.
#:
Jump = subclass object where
  __init__ = @code @reverse @op delta ~>
    @relative = @op == 'JUMP_RELATIVE' or @op == 'FOR_ITER' or @op.startswith 'SETUP'
    @start    = len @code.bytecode
    @value    = None
    @code.depth delta

    if @reverse  => @relative => raise $ SystemError 'cannot make reverse relative jumps'
       otherwise => @code.append @op 0

    None

  # Context manager protocol: a `jump-set` statement pair may
  # be replaced with a `with jump`.
  __enter__ = self        -> self
  __exit__  = self t v tv -> False where if t is None => @set

  #: Set the target of a forward jump. Insert the opcode of a reverse jump.
  #:
  #: set :: a
  #:
  set = ~>
    @value is None =>
      not @relative => @value += codelen $ take  @start      @code.bytecode
      not @reverse  => @value += codelen $ drop (@start + 1) @code.bytecode
      not @reverse and not @relative =>
        # This jump needs to account for itself.
        for i in itertools.count 0 16 => if @value >> i => @value += 3

    if @reverse  => @code.append @op @value
       otherwise => @code.bytecode !! @start = dis.opmap !! @op, @value


#: A mutable version of `types.CodeType`.
#:
#: type CodeType where
#:   cell      :: Maybe Generator -- a parent code object.
#:   argc      :: int
#:   kwargc    :: int
#:   varargs   :: bool -- accepts more than `argc` arguments.
#:   varkws    :: bool -- aceepts keyword arguments not in `varnames[argc:][:kwargc]`.
#:   function  :: bool -- is a function, not a module.
#:   generator :: bool -- is a function with `yield`.
#:   name      :: str
#:   qualname  :: str
#:
#:   var        :: Maybe str -- a string representing the innermost assignment.
#:   fastlocals :: dict (dict int int) -- maps names from `varnames` to opcode locations.
#:   consts     :: dict (object, type) int
#:   varnames   :: dict str int -- array-stored arguments.
#:   names      :: dict str int -- attributes, globals & module names.
#:   cellvars   :: dict str int -- local variables used by closures.
#:   freevars   :: dict str int -- non-local variables.
#:   enclosed   :: set -- names that may be added to `freevars`.
#:
#:   bytecode  :: [(int, int)] -- (opcode, argument) pairs.
#:   stacksize :: int -- minimum stack depth required for evaluation.
#:   currstack :: int -- approx. stack depth at this point.
#:
#:   filename :: str
#:   lineno   :: int
#:   lnotab   :: bytes
#:   lineoff  :: int -- `lineno` last time `lnotab` was updated.
#:   byteoff  :: int -- `len bytecode` at the same point.
#:
CodeType = subclass object where
  #: Make the bytecode slightly faster.
  #: The arguments are: bytecode, constants, names, lnotab.
  #: Constants are passed as a list to allow further additions.
  #:
  #: optimize :: Maybe (bytes list tuple bytes -> bytes)
  #:
  optimize = if PY_TAG.startswith 'cpython-' => fn where
    import '/ctypes/pythonapi'
    import '/ctypes/py_object'
    fn = pythonapi.PyCode_Optimize
    fn.restype  = py_object
    fn.argtypes = py_object, py_object, py_object, py_object

  __init__ = name function a: tuple! kw: tuple! va: tuple! vkw: tuple! cell: None ~>
    @cell      = cell
    @argc      = len a
    @kwargc    = len kw
    @varargs   = bool va
    @varkws    = bool vkw
    @function  = bool function
    @generator = False  # only becomes known during generation
    @name      = str name
    @qualname  = ''.join $ filter (x -> x) $ list'
      cell => cell.qualname
      cell => cell.qualname => '.'
      cell => cell.function => '<locals>.'
      function => name

    @var        = None
    @fastlocals = collections.defaultdict dict
    @consts     = collections.defaultdict $ -> len @consts
    @varnames   = collections.defaultdict $ -> len @varnames
    @names      = collections.defaultdict $ -> len @names
    @cellvars   = collections.defaultdict $ -> len @cellvars
    @freevars   = collections.defaultdict $ -> -1 - len @freevars
    @enclosed   = if
      cell      => dict.keys cell.varnames | cell.cellvars | cell.enclosed
      otherwise => set!

    exhaust $ map (@varnames !!) $ itertools.chain a kw va vkw

    @bytecode  = list!
    @stacksize = 0
    @currstack = 0

    # Set on first `lnomark`.
    @filename = '<generated>'
    @lineno   = 1
    @lnotab   = b''
    @lineoff  = -1
    @byteoff  = 0
    None

  #: Calculated value of CodeType.co_flags.
  #:
  #: flags :: int
  #:
  flags = ~> foldl1 (|) $ filter (x -> x) $ list'
    @function  => 0b000011  # globals != locals & the latter are stored in an array
    @varargs   => 0b000100
    @varkws    => 0b001000
    @generator => 0b100000
    not @cellvars => not @freevars => 0b1000000

  #: Generate a sequence of bytes for an opcode with an argument.
  #:
  #: code :: (int, int) -> bytes
  #:
  code = (op, arg) ~> if
    op  < dis.HAVE_ARGUMENT => struct.pack '<B'  op
    arg < 0x10000           => struct.pack '<BH' op arg
    otherwise               => @code (dis.opmap !! 'EXTENDED_ARG') (arg >> 16) +
                               struct.pack '<BH' op (arg & 0xffff)

  #: A marshallable code object with info from this generator.
  #:
  #: frozen :: types.CodeType
  #:
  frozen = ~>
    code     = b''.join $ map @code @bytecode
    consts   = list  $ map fst $ sorted @consts key: (@consts !!)
    names    = tuple $ sorted @names    key: (@names    !!)
    varnames = tuple $ sorted @varnames key: (@varnames !!)
    cellvars = tuple $ sorted @cellvars key: (@cellvars !!)
    freevars = tuple $ sorted @freevars key: (@freevars !!) reverse: True

    if @optimize =>
      # Most of the functions are unaffected by the first run, but some
      # may benefit from two.
      code = @optimize code consts names @lnotab
      code = @optimize code consts names @lnotab

    types.CodeType @argc @kwargc (len varnames) @stacksize @flags code (tuple consts) names
      varnames
      @filename
      @name
      @lineno
      @lnotab
      freevars
      cellvars

  #: Append a new opcode to the sequence.
  #:
  #: append :: str (Optional int) (Optional int) -> a
  #:
  append = name value: 0 delta: 0 ~>
    @depth delta
    # These indices are used to quickly change all references
    # to an array slot into references to a cell.
    if name == 'LOAD_FAST'  => @fastlocals !! v !! len @bytecode = dis.opmap !! 'LOAD_DEREF'
    if name == 'STORE_FAST' => @fastlocals !! v !! len @bytecode = dis.opmap !! 'STORE_DEREF'
    @bytecode.append (dis.opmap !! name, value)

  #: Request a permanent change in stack size.
  #:
  #: depth :: int -> ()
  #:
  depth = x ~>
    # Python calculates the stack depth by scanning bytecode.
    # We'll opt for traversing the AST instead.
    @currstack += x
    @currstack > @stacksize => @stacksize = @currstack

  #: Push `x` onto the value stack.
  #:
  #: Technically, `x` can be anything, but most types would make
  #: the code object unmarshallable.
  #:
  #: pushconst :: object -> a
  #:
  pushconst = x ~> @append 'LOAD_CONST' delta: +1 $ @consts !! (x, type x)

  #: Push the value assigned to some name onto the value stack.
  #:
  #: pushname :: str -> a
  #:
  pushname = v ~> if
    v in @cellvars => @append 'LOAD_DEREF'  delta: +1 $ @cellvars !! v
    v in @varnames => @append 'LOAD_FAST'   delta: +1 $ @varnames !! v
    v in @enclosed => @append 'LOAD_DEREF'  delta: +1 $ @freevars !! v
    v in CONSTANTS => @pushconst $ CONSTANTS !! v
    @function      => @append 'LOAD_GLOBAL' delta: +1 $ @names !! v
    otherwise      => @append 'LOAD_NAME'   delta: +1 $ @names !! v

  #: Pop the value from the top of the stack, assign it to a name.
  #:
  #: popname :: str -> a
  #:
  popname = v ~> if
    v in @cellvars => @append 'STORE_DEREF' delta: -1 $ @cellvars !! v
    v in @enclosed => @append 'STORE_DEREF' delta: -1 $ @freevars !! v
    @function      => @append 'STORE_FAST'  delta: -1 $ @varnames !! v
    otherwise      => @append 'STORE_NAME'  delta: -1 $ @names    !! v

  #: Load a cell object referencing some name.
  #:
  #: Used to create closures.
  #:
  #: pushcell :: str -> a
  #:
  pushcell = v ~>
    for i in @fastlocals !! v =>
      # Note that this affects variables created after the closure in no way.
      @bytecode !! i = @fastlocals !! v !! i, @cellvars !! v

    @add_opcode 'LOAD_CLOSURE' delta: +1 $ if
      v in @cellvars => @cellvars !! v
      v in @varnames => @cellvars !! v
      otherwise      => @freevars !! v

  #: Insert a jump clause.
  #:
  #: jump :: str (Optional bool) (Optional int) -> Jump
  #:
  jump = opname reverse: False delta: 0 ~> Jump self reverse opname delta: 0

  #: Make a child code object.
  #:
  #: spawn :: str * ** -> CodeType
  #:
  spawn = name *: other_args **: other_kwargs ~> CodeType *: other_args **: other_kwargs $ if
    @var is None       => name
    @var.isidentifier! => @var
    otherwise          => '(' + @var + ')'
