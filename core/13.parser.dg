import '/re'
import '/collections'
import '/ast/literal_eval'

#: Parse an input string.
#:
#: parse :: str (Optional str) -> Node
#:
parse = data filename: '<string>' ->
  p = Parser data filename
  p.block (filename, 1, 1, head p.lines) closed: False $ x -> if
    x is EOFTok => True
    x :: Ending => p.error 'unexpected close-paren' x.loc


#: Parse the contents of a file-like object opened in text mode.
#:
#: Note that the `filename` argument is only used if the file-like object
#: has no `name` attribute itself.
#:
#: parsefd :: TextIOBase (Optional str) -> Node
#:
parsefd = data filename: '<stream>' ->
  parse (data.read -1) (getattr data 'name' filename)


#: A recursive descent parser with a built-in regex-based tokenizer.
#:
#: type Parser < deque Node where
#:   tokens :: iter MatchObject -- see `regex`.
#:   indent :: deque int -- a stack of indentation levels, starting with 0.
#:   lineno :: int -- 1-based line number.
#:   charno :: int -- 1-based character number.
#:   lines  :: list str -- the input, split at line breaks.
#:
Parser = subclass collections.deque where
  __init__ = @data @filename ~>
    @tokens  = @regex.finditer @data
    @indent  = collections.deque $ list' 0
    @lineno  = 1
    @charno  = 1
    @lines   = @data.split '\n'
    None

  __iter__ = self -> self
  __next__ = self ->
    if self => @pop!
       otherwise => except
         e =>
           m   = next @tokens
           g   = m.group!
           pos = @filename, @lineno, @charno, @lines !! (@lineno - 1)

           '\n' in g => @charno = -g.rfind '\n'
           @charno += len g
           @lineno += g.count '\n'
           @token pos m.lastgroup m

         e :: StopIteration => EOFTok

  #: A big regex used to tokenize input text. Each top-level group
  #: must have a handling branch in `token`, else `SyntaxError` is raised.
  #:
  #: regex :: Re
  #:
  regex = re.compile r'''(?isx)
    (?P<space>  [^\S\n]+|\s*\#[^\n]*)
   |(?P<const>  [+-]?(?:0b[0-1]+|0o[0-7]+|0x[0-9a-f]+|[0-9]+(?:\.[0-9]+)?(?:e[+-]?[0-9]+)?j?))
   |(?P<str>    (?P<flags>br|r?b?)(?P<quote>['"]{3}|['"])(?P<content>(?:\\?.)*?)\5)
   |(?P<name>   \w+'*|\*+(?=:)|([!$%&*+\--/:<-@\\^|~;]+)|(,+)|\s*(\n)(\ *)|`(\w+'*)`)
   |(?P<block>  \()
   |(?P<end>    \))
   |(?P<strerr> ['"])
   |.
  '''

  # `Name`s that have the corresponding flags set.
  # (`infixn` -> `infix`, but there's a method with that name below.)
  spec_a = set' 'for' 'while' 'with'
  spec_b = set' 'if' 'except'
  nolhs  = set' '@' '~'
  norhs  = set' '!'
  infixn = set' 'and' 'in' 'is' 'or' 'where'

  #: Handle a single regex match.
  #:
  #: token :: (str, int, int, str) str MatchObject -> Node
  #:
  token = pos f m ~>
    if f == 'space' => next self
       f == 'const' => Constant at: pos $ literal_eval $ m.group 0
       f == 'str'   => Constant at: pos $ literal_eval $
         x = 3 * m.group 'quote' !! 0
         m.group 'flags' + x + m.group 'content' + x

       f == 'name' =>
         x, a, b, c, d, e = m.group 7 8 9 10 11 12

         c =>
           # Handling indentation here is more efficient.
           pos2  = @filename, @lineno, @charno, @lines !! (@lineno - 1)
           level = len d

           level > last @indent =>
             @indent.append level
             @append $ @block pos closed: False $ x ->
               x :: Ending => x is Dedent or
                 # Indented blocks can be ended with close-parens.
                 # We have to account for a decrease in indentation, though.
                 @indent.pop!
                 # This may not be the only indented block that've ended.
                 # A parenthesized one will take `x` off the stack.
                 @append x
               x :: Ending

           # `level >  last @indent` => the indented block was ended by a close-paren.
           # `level == last @indent` => we're still parsing it.
           while level < last @indent =>
             @indent.pop!
             @append $ Name '\n' infix: True varary: True at: pos
             @append $ Dedent
             last @indent < level => @error 'no matching indentation level' pos2

         Name (c or e or x) at: pos
           infix:  (bool $ a or b or c or e or x in infixn)
           varary: (bool $ b or c)
           nolhs:  (a in nolhs)
           norhs:  (a in norhs)
           spec_a: (x in spec_a)
           spec_b: (x in spec_b)

       f == 'block'  => @block pos (Ending ')' ==)
       f == 'end'    => Ending ')' at: pos
       f == 'strerr' => @error 'unexpected EOF while reading a string literal' pos
       otherwise     => @error 'invalid character'                             pos

  #: Read tokens until the end of the block.
  #:
  #: pos -- (filename, lineno, charno, first line) of this block.
  #: end -- returns True if a `Node` is an acceptable block end.
  #: closed -- whether the block is encased in hard parentheses.
  #:
  #: block :: (str, int, int, str) (Node -> bool) (Optional bool) -> Node
  #:
  block = pos end closed: True ~>
    result = Constant tuple! at: pos
    isexpr = False
    x      = next self

    while not $ end x =>
      if x is Dedent => @error 'broken indentation in this block'   pos
         x is EOFTok => @error 'unexpected EOF in a block'          pos
         x :: Ending => @error 'this block was not closed properly' pos

         isexpr    => result = @infix (Name '' infix: True varary: True at: x.loc) result x
         x != '\n' => result, isexpr = @special x, True
      x = next self

    result.closed |= closed
    result.indent  = not closed
    result

  #: Combine two parts of a tree with an infix `Name`.
  #:
  #: op  -- something to combine with.
  #: lhs -- everything to the left.
  #: rhs -- next `Node` to the right.
  #:
  #: infix :: Name Node Node -> Node
  #:
  infix = op lhs rhs ~>
    br = False

    not op.norhs => while rhs == '\n' =>
      # There are some special cases for indented rhs,
      # so we'll have to ignore the line breaks for now.
      br, rhs = rhs, next self

    rhs.nolhs and not rhs.closed =>
      # Got to handle that first, as the empty operator may not have
      # enough binding strength for that later.
      rhs = @infix (Name '' infix: True varary: True at: rhs.loc) rhs $ next self

    if
      rhs :: Ending or op.norhs =>
        @append rhs
        op != '' => lhs = @infixin op lhs None
        lhs

      br and not rhs.indent =>
        op != '' => lhs = @infixin op lhs None
        @infixin br lhs rhs

      rhs.infix and not rhs.closed and (op == '' or not (rhs > op)) =>
        op != '' => lhs = @infixin op lhs None
        @infix rhs lhs $ next self

      otherwise => @infixin op lhs rhs

  #: Recursively descend into `lhs` to apply infix precedence rules.
  #:
  #: `rhs` may be `None` if there is none.
  #:
  #: infixin :: Name Node (Maybe Node) -> Expression
  #:
  infixin = op lhs rhs ~> if
    lhs :: Expression and not lhs.closed and op > lhs.op =>
      lhs.args.append $ @infixin op (lhs.args.pop -1) rhs
      lhs

    rhs is None =>
      LeftBind op lhs closed: True at: lhs.loc

    lhs :: Expression and not lhs.closed and op.varary and op == lhs.op =>
      lhs.args.extend $ tail (@make_call op lhs rhs).args
      lhs

    op == '' and lhs.infix and not lhs.closed =>
      RightBind lhs at: lhs.loc $ if (Name '' > lhs => @special rhs) (otherwise => rhs)

    otherwise => @make_call op lhs rhs

  #: Create a simple function call. (Almost) no fancy rules.
  #:
  #: `rhs` can't be `None` once again. Handle that in some other way.
  #:
  #: make_call :: Name Node Node -> Expression
  #:
  make_call = op lhs rhs ~> if
    op == '' and not rhs.closed and rhs :: Expression and rhs.op == '\n' =>
      # In an indented block after an empty name, each statement
      # is a separate RHS.
      Expression op lhs at: lhs.loc *: rhs.args
    otherwise =>
      Expression op lhs at: lhs.loc $ if
        Name '' > op => @special rhs
        otherwise    => rhs

  #: Handle a couple of fancy syntactic constructs.
  #:
  #: Suppose we have `x == Name "yoba"`. Then:
  #:   condition  | syntax        | result
  #:   -----------+---------------+------------------------------------
  #:   x.spec_a   | yoba a => b   | Expression (Name 'yoba') a b
  #:   -----------+---------------+------------------------------------
  #:   x.spec_b   | yoba a => b   | Expression (Name '') (Name 'yoba')
  #:              |      c => d   |    Expression (Name '=>') a b
  #:              |      e => f   |    Expression (Name '=>') c d
  #:              |               |    Expression (Name '=>') e f
  #:              | (here, `a => b` may be omitted.)
  #:
  #: special :: Node -> Node
  #:
  special = x ~>
    x.spec_a =>
      x = @infix x (@block x.loc ('=>' ==)) (next self)

    x.spec_b =>
      arg = @block x.loc $ y ->
        end = y :: Ending or y == '\n'
        end => @append y
        end

      arg != Constant tuple! =>
         x = @infix (Name '' infix: True varary: True at: arg.loc) x arg

    x

  #: Handle a parse error.
  #:
  #: THAT's what we have to thank for these (str, int, int, str)-type locations.
  #:
  #: error :: str (str, int, int, str) -> _|_
  #:
  error = staticmethod $ description at -> raise $ SyntaxError description at
