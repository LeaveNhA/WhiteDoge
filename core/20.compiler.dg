import '/itertools'
import '/posixpath'

#: Something bigger than anything you can come up with.
#: Something...more, than a number.
ANY = float 'inf'


#: Compile some source code.
#:
#: compile :: str (Optional str) -> types.CodeType
#:
compile = data filename: '<string>' -> (Compiler '').work $ parse data filename


#: Compile the contents of a file-like object.
#:
#: compilefd :: TextIOBase (Optional str) -> types.CodeType
#:
compilefd = fd filename: '<stream>' -> (Compiler '').work $ parsefd fd filename


#: Raise a SyntaxError.
#:
#: ERROR :: (Either Node (str, int, int, str)) str -> _|_
#:
ERROR = at description -> if
  at :: Node => raise $ SyntaxError description at.loc
  otherwise  => raise $ SyntaxError description at


#: Enforce arbitrary argument count limits on a compile-time function.
#:
#: `ANY` for `min` means "accept any amount of arguments".
#: `ANY` for `max` means "the function is variadic".
#: Unless specified, `max` is assumed to be the same as `min`.
#:
#: ARGCOUNT :: int int (Node [Node] -> a) -> (Node [Node] -> a)
#:
ARGCOUNT = min fn max: None -> if
  min is ANY => fn
  otherwise  => self f args -> if
    len args <  min         => ERROR f $ 'got {1} arguments, min. {0}'.format min $ len args
    len args > (max or min) => ERROR f $ 'got {1} arguments, max. {0}'.format max $ len args
    otherwise               => fn self f args


# Common prefix functions. See `Generator.prefix`.
INVALID    = x -> f _  ~> ERROR f x
COLLECTION = x -> f xs ~> (@pushlist xs, @append x (len xs) $ 1 - len xs)
BINARY     = x -> ARGCOUNT 2 $ f xs ~> (@pushlist xs, @append x 0 -1)
INPLACE    = x -> ARGCOUNT 2 $ f xs ~> (@pushlist xs, @append x 0 -1, @append 'DUP_TOP' 0 +1, @popast $ head xs)
JUMP       = x -> ARGCOUNT 2 $ f (a, b) ~> (@pushast a, with @jump x delta: -1 => @pushast b)


#: Parse function call arguments.
#:
#: positional1 positional2 keyword: value *: varargs **: varkwargs
#:
#: CALLARGS :: [Node] -> ([Node], dict str Node, Maybe Node, Maybe Node)
#:
CALLARGS = xs -> a, kw, va, vkw where
  a   = list!
  kw  = dict!
  va  = None
  vkw = None

  for x in xs => if
    x :: Expression and x.op == ':' => if
      fst x.args == '*'  =>
        va => ERROR x 'can only have one `*: x`'
        va = snd x.args
      fst x.args == '**' =>
        vkw => ERROR x 'can only have one `**: x`'
        vkw = snd x.args
      fst x.args :: Name => kw !! (fst x.args).value = snd x.args
      otherwise => ERROR x 'keywords should be identifiers'
    otherwise => a.append x

  len a  > 255 => ERROR (fst xs) 'too many arguments'
  len kw > 255 => ERROR (fst xs) 'too many keyword arguments'


#: Parse function definition arguments.
#:
#: Unlike `CALLARGS`, this function enforces a strict order and supports patterns.
#:
#: positional1 (positional2, iterable): default_value *: varargs keyword_only *: varkwargs
#:
#: DEFNARGS :: Node -> ([str], [str], [Node], {str: Node}, [str], [str], {str: Node})
#:
DEFNARGS = xs -> a, kw, da, dkw, va, vkw, add where
  a    = list!  # positional
  kw   = list!  # keyword-only
  da   = list!  # default values
  dkw  = dict!  # default values for keyword-only arguments
  va   = list!  # varargs (a singleton)
  vkw  = list!  # varkwargs (a singleton)
  add  = dict!  # (name -> pattern) mapping
  cnt  = itertools.count 0

  pattern = x -> if
    x :: Name => if
      x in a + kw + va => ERROR x 'duplicate argument name'
      x == '_'         => 'ignore:{}'.format $ next cnt
      otherwise        => x.value
    otherwise => name where add !! (name = 'pattern:{}'.format $ next cnt) = x

  data = if xs :: Expression and not xs.closed and xs.op == '' => xs.args
            otherwise                                          => list' xs

  for x in data => if
    x :: Expression and x.op == ':' => if
      x :: LeftBind  => ERROR x "where's the value?"
      x :: RightBind => ERROR x "where's the keyword?"
      fst x.args == '*' =>
        va => ERROR x 'can only have one `*: x`'
        va.append $ pattern $ snd x.args
      fst x.args == '**' =>
        vkw => ERROR x 'can only have one `**: x`'
        vkw.append $ pattern $ snd x.args
      va =>
        k, v = x.args
        k :: Name or ERROR k 'keywords should be identifiers'
        kw.append name where dkw !! (name = pattern k) = v
      otherwise =>
        a.append $ pattern $ fst x.args
        da.append $ snd x.args
    va => kw.append $ pattern x
    da => ERROR x 'this argument must have a default value'
    otherwise => a.append $ pattern x

  len a  > 255 => ERROR xs 'too many arguments'
  len kw > 255 => ERROR xs 'too many keyword arguments'


Compiler = subclass CodeType where
  #: Compile an AST into Python bytecode.
  #:
  #: work :: Node -> types.CodeType
  #:
  work = x ~>
    @setfile x
    @pushast x
    @append  'RETURN_VALUE' delta: -1
    @frozen

  #: Note where this code object starts in the source code.
  #:
  #: setfile :: Node -> a
  #:
  setfile = x ~>
    @filename = x.loc !! 0
    @lineno   = x.loc !! 1
    @lineoff  = x.loc !! 1

  #: Push the result of evaluating `x` onto the stack.
  #:
  #: pushast :: Node -> a
  #:
  pushast = x ~>
    x.loc and @lineoff >= 0 =>
      # A good time to map bytecode to source code lines.
      lineoff = x.loc !! 1 - @lineoff
      lineoff > 0 =>
        byteoff = codelen $ drop @byteoff @bytecode
        byteoff > 0 =>
          @lineoff = x.loc !! 1
          @byteoff = len @bytecode
          @lnotab += lineoff // 256 * b'\x00\xff'
          @lnotab += byteoff // 256 * b'\xff\x00'
          @lnotab += bytes (byteoff % 256, lineoff % 256)

    if x :: Name       => @pushname  x.value
       x :: Constant   => @pushconst x.value
       x :: LeftBind   => @pushbind  False x.op *: x.args
       x :: RightBind  => @pushbind  True  x.op *: x.args
       x :: Expression => @pushcall  x.op *: x.args
       otherwise       => raise $ TypeError 'invalid node' $ type x

  #: Push some string-object pairs.
  #:
  #: Used by keyword arguments and annotations.
  #:
  pushkeys = xs ~> for (k, v) in xs =>
    @pushconst k
    @pushast   v

  #: Push multiple items in one go.
  #:
  #: pushlist :: [Node] -> a
  #:
  pushlist = xs ~> for x in xs => @pushast x

  #: Evaluate multiple expressions, discarding all results but the last.
  #:
  #: pushlast :: *Node -> a
  #:
  pushlast = *: (*xs, y) ~>
    for x in xs =>
      @pushast x
      @append 'POP_TOP' delta: -1
    @pushast y

  #: Create a function out of a code object.
  #:
  #: pushclosure :: CodeType [Node] (dict str Node) -> a
  #:
  pushclosure = code defaults kwdefaults ~>
    code.append 'RETURN_VALUE' delta: -1
    const = code.frozen
    @pushkeys  kwdefaults.items!
    @pushlist  defaults
    @pushcells const.co_freevars
    @append    'BUILD_TUPLE' (len const.co_freevars) $ 1 - len const.co_freevars
    @pushconst const
    @pushconst code.qualname
    @append    'MAKE_CLOSURE'
      0 + len defaults + 256 * len kwdefaults
      0 - len defaults - 2   * len kwdefaults - 2

  #: Push the result of calling `f` with `args` onto the value stack.
  #:
  #: pushcall :: Node *Node -> a
  #:
  pushcall = f *: args ~> if
    f :: Name and f.value in @prefix => (@prefix !! f.value) self f args
    # Infix functions don't get fancy syntax.
    # When using infix operators, varargs and keyword arguments are disabled.
    f.infix and not f.closed =>
      @pushast  f
      @pushlist args
      @append 'CALL_FUNCTION' (len args) (-len args)
    otherwise =>
      @pushast f
      @pushcalltop 0 args

  #: Push the result of calling a function from the top of the stack.
  #:
  #: Additional arguments may be taken from there, too.
  #:
  #: pushcalltop :: int [Node] -> a
  #:
  pushcalltop = argc argv ~>
    a, kw, va, vkw = CALLARGS argv
    @pushlist a
    @pushkeys kw.items!
    va  => @pushast va
    vkw => @pushast vkw
    @append
      'CALL_FUNCTION' + '_VAR' * bool va + '_KW' * bool vkw
      0 + argc + len a + 256 * len kw
      0 - argc - len a - 2   * len kw - bool va - bool vkw

  #: Default infix bind implementation.
  #:
  #: `x R` <=> `y -> x R y`
  #: `R x` <=> `y -> y R x`
  #:
  #: pushbind :: bool Node Node -> a
  #:
  pushbind = right f arg ~> if
    f.value in @infixl and not right => (@infixl !! f.value) self f arg
    f.value in @infixr and     right => (@infixr !! f.value) self f arg
    f.value in @prefix and not (f.value in builtins.__dict__) =>
      # Note that partial binding of macros does not actually use
      # runtime functions (as `pushcall` will prefer compile-time ones.)
      # Still, this is a pretty good method of checking if
      # someone's attempting to partially bind assignment operators, etc.
      Parser.error 'this operator requires both arguments' f.loc
    otherwise =>
      c = if right     => @spawn f.value (tuple' '<R>') (tuple' '<L>')
             otherwise => @spawn f.value (tuple' '<L>') (tuple' '<R>')
      c.setfile  f
      c.pushcall f (Name '<L>') (Name '<R>')
      @pushclosure c tuple! $ dict' $ if right     => '<L>', arg
                                         otherwise => '<R>', arg

  #: Create a function.
  #:
  #: pushfunction :: (Either Node [Node]) Node -> a
  #:
  pushfunction = args body ~>
    a, kw, da, dkw, va, vkw, patterns = DEFNARGS args
    g = @spawn '<lambda>' a kw va vkw
    for (name, pattern) in patterns.items! =>
      g.pushname name
      g.popast   pattern
    g.setfile args
    g.pushast body
    @pushclosure g da dkw

  #: Create a method.
  #:
  #: Which is basically a function with an additional argument named "self".
  #:
  #: pushmethod :: Node Node -> a
  #:
  pushmethod = xs body ~> @pushfunction xs body where if
    xs :: Expression and not xs.closed and xs.op == '' => xs.args.insert 0 (Name 'self')
    otherwise => xs = Expression (Name '') (Name 'self') xs at: xs.loc

  #: Pop a value off the stack and store it somewhere.
  #:
  #: popast :: Node -> a
  #:
  popast = x ~> if
    x :: RightBind => if
      # A single item prefixed with an at sign is a shorthand
      # for attribute assignment. That is, `self.attribute = ...`.
      x.op == '@' =>
        attr, = x.args
        attr :: Name or ERROR attr 'not an attribute'
        @pushname 'self'
        @append   'STORE_ATTR' delta: -2 $ @names !! attr.value

      # A single item prefixed with a star.
      #
      # In a comma-separated list, that is an instruction to put excess
      # items in this variable as a list. When there are no other elements,
      # however, the star does nothing.
      #
      x.op == '*' => @popast $ head x.args
      otherwise   => ERROR x 'not something one can assign to'

    x :: Expression => if
      len x.args == 2 and x.op == '.' =>
        item, attr = x.args
        attr :: Name or ERROR attr 'not an attribute'
        @pushast item
        @append  'STORE_ATTR' delta: -2 $ @names !! attr.value

      len x.args == 2 and x.op == '!!' =>
        @pushlist x.args
        @append   'STORE_SUBSCR' delta: -3

      # A comma-separated list of assignment targets.
      #
      # 1. Assume the value on top of the stack is an iterable.
      # 2. Split it into separate items.
      # 3. Store each of them in an assignment target from this list.
      #
      x.op == ',' =>
        sz = len x.args
        qs = list (None where for (i, q) in enumerate x.args =>
          if q :: RightBind and q.op == '*' => yield i)

        if len qs > 1 => ERROR (snd $ stars !! 1) 'cannot unpack into more than 1 list'
           len qs < 1 => @append delta: (sz - 1) 'UNPACK_SEQUENCE' sz
           otherwise  => @append delta: (sz - 1) 'UNPACK_EX' $ i + 256 * (sz - i - 1) where
             i = head qs
        for a in x.args => @popast a

      otherwise => ERROR x 'not something one can assign to'

    x :: Name => @popname x.value
    otherwise => ERROR x 'not something one can assign to'

  prefix = dict'
    '',    f xs ~> @pushcall *: xs
    '\n',  f xs ~> @pushlast *: xs
    'not', ARGCOUNT 1 $ f (item,)      ~> (@pushast item, @append 'UNARY_NOT')
    '->',  ARGCOUNT 2 $ f (args, body) ~>  @pushfunction args body
    '~>',  ARGCOUNT 2 $ f (args, body) ~>  @pushmethod   args body
    '!!~', ARGCOUNT 2 $ f (coll, item) ~>
      @pushconst None
      @pushast   coll
      @pushast   item
      @append    'DELETE_SUBSCR' delta: -2

    ':',      INVALID    'keyword argument to what?'
    '!',      INVALID    'this operator is postfix'
    '~',      INVALID    'this operator is prefix'
    '@',      INVALID    'this operator is prefix'
    ',',      COLLECTION 'BUILD_TUPLE'
    "set'",   COLLECTION 'BUILD_SET'
    "list'",  COLLECTION 'BUILD_LIST'
    "tuple'", COLLECTION 'BUILD_TUPLE'
    '!!',     BINARY     'BINARY_SUBSCR'
    '+',      BINARY     'BINARY_ADD'
    '-',      BINARY     'BINARY_SUBTRACT'
    '*',      BINARY     'BINARY_MULTIPLY'
    '**',     BINARY     'BINARY_POWER'
    '/',      BINARY     'BINARY_TRUE_DIVIDE'
    '//',     BINARY     'BINARY_FLOOR_DIVIDE'
    '%',      BINARY     'BINARY_MODULO'
    '&',      BINARY     'BINARY_AND'
    '^',      BINARY     'BINARY_XOR'
    '|',      BINARY     'BINARY_OR'
    '<<',     BINARY     'BINARY_LSHIFT'
    '>>',     BINARY     'BINARY_RSHIFT'
    '!!=',    INPLACE    'BINARY_SUBSCR'
    '+=',     INPLACE    'INPLACE_ADD'
    '-=',     INPLACE    'INPLACE_SUBTRACT'
    '*=',     INPLACE    'INPLACE_MULTIPLY'
    '**=',    INPLACE    'INPLACE_POWER'
    '/=',     INPLACE    'INPLACE_TRUE_DIVIDE'
    '//=',    INPLACE    'INPLACE_FLOOR_DIVIDE'
    '%=',     INPLACE    'INPLACE_MODULO'
    '&=',     INPLACE    'INPLACE_AND'
    '^=',     INPLACE    'INPLACE_XOR'
    '|=',     INPLACE    'INPLACE_OR'
    '<<=',    INPLACE    'INPLACE_LSHIFT'
    '>>=',    INPLACE    'INPLACE_RSHIFT'
    'or',     JUMP       'JUMP_IF_TRUE_OR_POP'
    '=>',     JUMP       'JUMP_IF_FALSE_OR_POP'
    'and',    JUMP       'JUMP_IF_FALSE_OR_POP'

    '=', ARGCOUNT 2 $ f (name, value) ~>
      @var, x = repr name, @var
      @pushast value
      @var = x
      @append 'DUP_TOP' delta: +1
      @popast name

    '.', ARGCOUNT 2 $ f (x, y) ~>
      y :: Name or ERROR y 'not an attribute'
      @pushast x
      @append  'LOAD_ATTR' $ @names !! y.value

    '!.', ARGCOUNT 2 $ f (x, y) ~>
      y :: Name or ERROR y 'not an attribute'
      @pushcall x
      @append   'LOAD_ATTR' $ @names !! y.value

    '.~',  ARGCOUNT 2 $ f (x, y) ~>
      y :: Name or ERROR y 'not an attribute'
      @pushconst None
      @pushast   x
      @append    'DELETE_ATTR' delta: -1 $ @names !! y.value

    '$', ARGCOUNT 2 $ f (g, x) ~> if
      g :: Expression and not g.closed and g.op == '' => @pushcall g.op *: (g.args+:x)
      otherwise => @pushcall g x

    #: Import a module given a POSIX-style path.
    #:
    #: import '/sys'                 imports a module named 'sys'
    #: import '/os/path' qualified   imports a module named 'os' with a submodule 'path'
    #: import '/dg/addon/fork'       imports 'fork' from package 'dg.addon'
    #: import 'markup'               imports 'markup' from the current package
    #:
    'import', ARGCOUNT 1 max: 2 $ f (name, *qual) ~>
      qual, = qual or tuple' None
      name       :: Constant or ERROR name 'module names should be known at compile time'
      name.value :: str      or ERROR name 'module names are strings'
      qual in (None, 'qualified') or ERROR qual 'what is this?'

      parent = 1
      path   = (posixpath.normpath name.value).split posixpath.sep
      while path and head path == ''           and not (path.pop 0) => parent  = 0
      while path and head path == posixpath.pardir and  path.pop 0  => parent += 1
      while path and head path == posixpath.curdir and  path.pop 0  => ()
      path or ERROR name 'this resolves to an empty name'

      if
        parent == 0 and (qual or len path == 1) =>
          @pushconst parent
          @pushconst None
          @append    'IMPORT_NAME' delta: -1 $ @names !! '.'.join path

        otherwise =>
          qual => ERROR qual 'relative imports cannot be qualified'
          *dir, file = path
          @pushconst parent
          @pushconst $ tuple' file
          @append    'IMPORT_NAME' delta: -1 $ @names !! '.'.join dir
          @append    'IMPORT_FROM' delta:  1 $ @names !! file
          @append    'ROT_TWO'     delta:  0
          @append    'POP_TOP'     delta: -1

      @append 'DUP_TOP' delta: +1
      @popast $ Name $ path !! (qual != None)

    #: Local binding.
    #:
    #: I.e. `a where b` makes stuff from `b` only visible in `a`.
    #:
    'where', ARGCOUNT 2 $ f (ret, env) ~>
      g = @spawn '<lambda>'
      g.setfile  ret
      g.pushlast env ret
      @pushclosure g tuple! dict!
      @append 'CALL_FUNCTION' 0

    #: Type creation.
    #:
    #: Duplicate the local namespace and turn it into a type. `where` is useful here.
    #:
    'subclass', ARGCOUNT ANY $ f args ~>
      @pushname  '__dg_build_class__'  # Note: these may have been redefined
      @pushname  '__name__'            # in this namespace. Watch the syntax highlighting.
      @pushname  'locals'              # (And don't name methods __dg_build_class__.)
      @append    'CALL_FUNCTION' 0
      @pushconst None  # TODO docstring (the first constant in this code object)-
      @pushconst @qualname
      @pushconst @name
      @pushcalltop 5 args

    #: Automatic context managing.
    #:
    #: I think it's called IDisposable or something.
    #:
    'with', ARGCOUNT 2 $ f (ctx, body) ~>
      var, ctx = if
        ctx :: Expression and len ctx.args == 2 and ctx.op == '=' => ctx.args
        otherwise => Name '_', ctx

      @pushconst None  # reserve space for a return value
      @pushast   ctx
      with @jump 'SETUP_WITH' delta: +3 =>  #=> None, __exit__, return value of __enter__
        @popast    var                      #=> None, __exit__
        @pushast   body                     #=> None, __exit__, return value
        @append    'ROT_THREE' delta: +0
        @append    'ROT_TWO'   delta: +0
        @append    'POP_BLOCK' delta: -1     #=> return value, __exit__
        @pushconst None                      # this is for END_FINALLY
      @append 'WITH_CLEANUP' delta: -1
      @append 'END_FINALLY'  delta: -3

    #: Repeat while a condition is true.
    #:
    #: I wonder if there's a nicer way to write interlinked jumps.
    #:
    'while', ARGCOUNT 2 $ f (cond, body) ~>
      @pushconst None
      restart = @jump 'JUMP_ABSOLUTE' True
      @pushast cond
      with @jump 'POP_JUMP_IF_FALSE' delta: -1 =>
        @append  'POP_TOP' delta: -1
        @pushast body
        restart.set

    #: Iterate over a...iterator, duh.
    #:
    #: Note that `var` may be any valid assignment target, not only a local variable.
    #:
    'for', ARGCOUNT 2 $ f (var, body) ~>
      not $ var :: Expression and var.op == 'in' and len var.args == 2 => ERROR var $ if
        # In Python, `in` has a higher precedence than `,`. That is,
        # if you simply write `a, b in c` you get `a, (b in c)`. `for a, b in c:`
        # is merely a special case in the parser; dg has no such thing.
        var :: Expression and var.op == ',' and not var.closed => 'forgot the parentheses?'
        otherwise => 'should be `a in b`'

      @pushconst None
      @pushast $ snd var.args
      @append    'GET_ITER'
      restart = @jump 'JUMP_ABSOLUTE' True
      with @jump 'FOR_ITER' delta: +1 =>
        @popast $ fst var.args
        @pushast  body
        @append   'ROT_THREE' delta: +0
        @append   'ROT_TWO'   delta: +0
        @append   'POP_TOP'   delta: -1
        restart.set
      @depth -1  # FOR_ITER automatically pops the iterable off the stack.

    #: Yield control to the caller.
    #:
    #: Did you know that generators have a `send` method? Look it up.
    #:
    'yield', ARGCOUNT 1 $ f (it,) ~>
      # TODO: yield from. `pushast iter`, `pushast it`, `YIELD_FROM`, delta: -1.
      @generator = True
      @pushast it
      @append  'YIELD_VALUE'

  infixl = dict'
    ':', INVALID 'keyword argument to what?'
    '~', INVALID 'this operator is prefix'
    '@', INVALID 'this operator is prefix'

    ',',     f item ~> (@pushast item, @append 'BUILD_TUPLE' 1)
    '!',     f func ~> (@pushast func, @append 'CALL_FUNCTION')
    '->',    f args ~>  @pushfunction args $ Constant None at: f.loc
    '~>',    f args ~>  @pushmethod   args $ Constant None at: f.loc
    'where', f expr ~>  @pushast      expr  # Nothing to bind.

  infixr = dict'
    ':', INVALID 'keyword argument to what?'
    '!', INVALID 'this operator is postfix'
    ',', INVALID 'this operator is unbindable'

    '~', f x ~> (@pushast x, @append 'UNARY_INVERT')
    '-', f x ~> (@pushast x, @append 'UNARY_NEGATIVE')

    #: Local attribute lookup.
    #:
    #: Equivalent to `self.name`.
    #:
    '@', f name ~>
      name :: Name or ERROR name 'not an attribute'
      @pushname 'self'
      @append   'LOAD_ATTR' $ @names !! name.value

    #: Argumentless function.
    #:
    #: Not generally recommended, but whatever.
    #:
    '->', f body ~>
      g = @spawn '<lambda>'
      g.setfile f
      g.pushast body
      @pushclosure g tuple! dict!

    #: Object property.
    #:
    #: Equivalent to `property $ self -> body`.
    #:
    '~>', f body ~>
      @pushname 'property'
      g = @spawn '<lambda>' $ tuple' 'self'
      g.setfile f
      g.pushast body
      @pushclosure g tuple! dict!
      @append 'CALL_FUNCTION' 1 delta: -1

    #: Return value-less binding.
    #:
    #: Mostly useful for generators: `list (where for ... => yield ...)`
    #:
    'where', f env ~>
      g = @spawn '<lambda>'
      g.setfile env
      g.pushast env
      @pushclosure g tuple! dict!
      @append 'CALL_FUNCTION' 0
