import '/dis'
import '/types'
import '/struct'
import '/collections'

# Allow cross-compiling for CPython 3.5 on CPython 3.4:
dis.opmap.setdefault 'WITH_CLEANUP_START'  81
dis.opmap.setdefault 'WITH_CLEANUP_FINISH' 82


#: Calculate the length of a bytecode sequence given (opcode, argument) pairs, in bytes.
#:
#: codelen :: [(int, int)] -> int
#:
codelen = seq -> sum $ map
  (c, v) -> if
    c < dis.HAVE_ARGUMENT => 1
    otherwise             => 3 * (1 + abs (v.bit_length! - 1) // 16)
  seq


Jump = subclass object where
  #: An argument to a jump opcode.
  #:
  #: code     :: CodeType  -- bytecode to insert a jump into.
  #: start    :: int       -- offset at which the jump object was created.
  #: op       :: str       -- instruction to insert.
  #: relative :: bool      -- whether to start counting from `start`.
  #: reverse  :: bool      -- ask questions first, insert later. Implies `absolute`.
  #:
  __init__ = @code @reverse @op delta ~>
    @relative = @op == 'JUMP_FORWARD' or @op == 'FOR_ITER' or @op.startswith 'SETUP'
    @start    = len @code.bytecode
    @value    = None
    @code.depth delta

    if @reverse  => @relative => raise $ SystemError 'cannot make reverse relative jumps'
       otherwise => @code.append @op 0
    None

  __enter__ = self        -> self
  __exit__  = self t v tv -> @set => False

  #: Set the target of a forward jump. Insert the opcode of a reverse jump.
  #:
  #: set :: a
  #:
  set = ~>
    @value is None =>
      @value = i = 0
      not @relative => @value += codelen $ take  @start      @code.bytecode
      not @reverse  => @value += codelen $ drop (@start + 1) @code.bytecode
      not @reverse and not @relative =>
        # This jump needs to account for itself.
        while @value >> i => @value, i = @value + 3, i + 16

    if @reverse  => @code.append @op @value
       otherwise => @code.bytecode !! @start = dis.opmap !! @op, @value


CodeType = subclass object where
  #: A mutable version of `types.CodeType`.
  #:
  #: cell      :: Maybe CodeType -- a parent code object.
  #: argc      :: int
  #: kwargc    :: int
  #: varargs   :: bool -- accepts more than `argc` arguments.
  #: varkws    :: bool -- accepts keyword arguments not in `varnames[argc:][:kwargc]`.
  #: function  :: bool -- is a function, not a module.
  #: generator :: bool -- is a function with `yield`.
  #: name      :: str
  #: qualname  :: str
  #: docstring :: str
  #:
  #: var        :: Maybe str -- a string representing the innermost assignment.
  #: fastlocals :: dict (dict int int) -- maps names from `varnames` to opcode locations.
  #: consts     :: dict (object, type) int
  #: varnames   :: dict str int -- array-stored arguments.
  #: names      :: dict str int -- attributes, globals & module names.
  #: cellvars   :: dict str int -- local variables used by closures.
  #: freevars   :: dict str int -- non-local variables.
  #: enclosed   :: set str -- names that may be added to `freevars`.
  #:
  #: bytecode  :: [(int, int)] -- (opcode, argument) pairs.
  #: stacksize :: int -- minimum stack depth required for evaluation.
  #: currstack :: int -- approx. stack depth at this point.
  #:
  #: filename :: str
  #: lineno   :: int
  #: lnotab   :: bytes
  #: lineoff  :: int -- `lineno` last time `lnotab` was updated.
  #: byteoff  :: int -- `len bytecode` at the same point.
  #:
  __init__ = name a: tuple! kw: tuple! va: tuple! vkw: tuple! cell: None function: False doc: None ~>
    @cell      = cell
    @argc      = len a
    @kwargc    = len kw
    @varargs   = bool va
    @varkws    = bool vkw
    @function  = bool function
    @generator = False  # only becomes known during generation
    @coroutine = False
    @name      = str name
    @docstring = doc
    @qualname  = ''
    cell => cell.qualname => @qualname += cell.qualname + '.'
    cell => cell.function => @qualname += '<locals>.'
    function => @qualname += name

    @var        = None
    @fastlocals = collections.defaultdict dict
    @consts     = collections.defaultdict $ -> len @consts
    @varnames   = collections.defaultdict $ -> len @varnames
    @names      = collections.defaultdict $ -> len @names
    @cellvars   = collections.defaultdict $ -> len @cellvars
    @freevars   = collections.defaultdict $ -> -1 - len @freevars
    @enclosed   = if
      cell      => dict.keys cell.varnames | cell.cellvars | cell.enclosed
      otherwise => set!
    @globals    = if
      cell      => cell.globals
      otherwise => set!
    for v in itertools.chain a kw va vkw => @varnames !! v
    # First constant in a code object is always its docstring.
    # Except if this is a class/module, in which case an additional manual
    # assignment to `__doc__` is necessary.
    @consts !! (doc, type doc)

    @bytecode  = []
    @stacksize = 0
    @currstack = 0

    @filename = '<generated>'
    @lineno   = 1
    @lnotab   = b''
    @lineoff  = -1
    @byteoff  = 0
    None

  #: These constants, unless redefined, be loaded with LOAD_CONST, not LOAD_GLOBAL.
  constnames = dict True: True False: False None: None otherwise: True

  #: Make the bytecode slightly faster. Only works on CPython, because it has
  #: a built-in peephole optimizer and writing a new one is hard. PyPy uses
  #: an AST-based optimizer instead, and we can't use that for obvious reasons.
  #: The arguments are: bytecode, constants, names, lnotab.
  #: Constants are passed as a list to allow further additions.
  #:
  #: optimize :: Maybe (bytes list tuple bytes -> bytes)
  #:
  optimize = if PY_TAG.startswith 'cpython-' => fn where
    import '/ctypes/pythonapi'
    import '/ctypes/py_object'
    fn = pythonapi.PyCode_Optimize
    fn.restype  = py_object
    fn.argtypes = py_object, py_object, py_object, py_object

  #: Calculated value of CodeType.co_flags.
  #:
  #: flags :: int
  #:
  flags = ~>
    f = 0
    # 0x1 = CO_OPTIMIZED -- do not create `locals()` at all, use an array instead
    # 0x2 = CO_NEWLOCALS -- do not set `locals()` to the same value as `globals()`
    @function => f |= 0x3
    @varargs  => f |= 0x4
    @varkws   => f |= 0x8
    # 0x10 = CO_NESTED -- set iff @freevars not empty; an obsolete `__future__` flag.
    not $ @cellvars or @freevars => f |= 0x40
    @generator => f |= 0x20
    @coroutine => f |= 0xA0  # every coroutine is a generator
    # 0x100 = CO_ITERATORCOROUTINE; set by `asyncio.coroutine`.
    # Flags >= 0x1000 are reserved for `__future__` imports. We don't have those.
    f

  #: Generate a sequence of bytes for an opcode with an argument.
  #:
  #: code :: (int, int) -> bytes
  #:
  code = (op, arg) ~> if
    op  < dis.HAVE_ARGUMENT => struct.pack '<B'  op
    arg < 0                 => @code (op, len @cellvars - arg - 1)
    arg < 0x10000           => struct.pack '<BH' op arg
    otherwise               => @code (dis.opmap !! 'EXTENDED_ARG', arg >> 16) +
                               struct.pack '<BH' op (arg & 0xffff)

  #: Convert this object into an immutable version actually suitable for use with `eval`.
  #:
  #: frozen :: types.CodeType
  #:
  frozen = ~>
    code     = b''.join $ map @code @bytecode
    consts   = list  $ map fst $ sorted @consts key: @consts.__getitem__
    names    = tuple $ sorted @names    key: @names.__getitem__
    varnames = tuple $ sorted @varnames key: @varnames.__getitem__
    cellvars = tuple $ sorted @cellvars key: @cellvars.__getitem__
    freevars = tuple $ sorted @freevars key: @freevars.__getitem__ reverse: True

    if @optimize =>
      # Most of the functions are unaffected by the first run, but some
      # may benefit from two. `PyCode_Optimize` is fast, so why not?
      code = @optimize code consts names @lnotab
      code = @optimize code consts names @lnotab

    types.CodeType @argc @kwargc (len varnames) @stacksize @flags code (tuple consts) names
      varnames
      @filename
      @name
      @lineno
      @lnotab
      freevars
      cellvars

  #: Append a new opcode to the sequence.
  #:
  #: append :: str (Optional int) (Optional int) -> a
  #:
  append = name arg: 0 delta: 0 ~>
    @depth delta
    # These indices are used to quickly change all references
    # to an array slot into references to a cell.
    name == 'LOAD_FAST'  => @fastlocals !! arg !! len @bytecode = dis.opmap !! 'LOAD_DEREF'
    name == 'STORE_FAST' => @fastlocals !! arg !! len @bytecode = dis.opmap !! 'STORE_DEREF'
    @bytecode.append (dis.opmap !! name, arg)

  #: Request a permanent change in stack size.
  #:
  #: depth :: int -> ()
  #:
  depth = x ~>
    # Python calculates the stack depth by scanning bytecode.
    # We'll opt for traversing the AST instead.
    @currstack += x
    @currstack > @stacksize => @stacksize = @currstack

  #: Push `x` onto the value stack.
  #:
  #: Technically, `x` can be anything, but most types would make
  #: the code object unmarshallable.
  #:
  #: pushconst :: object -> a
  #:
  pushconst = x ~> @append 'LOAD_CONST' delta: +1 $ @consts !! (x, type x)

  #: Push the value assigned to some name onto the value stack.
  #:
  #: pushname :: str (Optional (str, int, int, str)) -> a
  #:
  pushname = v at: None ~> if
    v in @cellvars   => @append 'LOAD_DEREF'  delta: +1 $ @cellvars !! v
    v in @varnames   => @append 'LOAD_FAST'   delta: +1 $ @varnames !! v
    v in @enclosed   => @append 'LOAD_DEREF'  delta: +1 $ @freevars !! v
    v in @globals    => @append 'LOAD_GLOBAL' delta: +1 $ @names !! v
    v in @constnames => @pushconst $ @constnames !! v
    otherwise        => @append 'LOAD_GLOBAL' delta: +1 $ @names !! v

  #: Pop the value from the top of the stack, assign it to a name.
  #:
  #: popname :: str (Optional bool) -> a
  #:
  popname = v free: False ~> if
    v in @cellvars => @append 'STORE_DEREF'  delta: -1 $ @cellvars !! v
    v in @varnames => @append 'STORE_FAST'   delta: -1 $ @varnames !! v
    v in @enclosed => @append 'STORE_DEREF'  delta: -1 $ @freevars !! v
    otherwise      => @append 'STORE_GLOBAL' delta: -1 $ @names    !! v

  #: Load cell objects referencing some names. Used to create closures.
  #:
  #: pushcells :: [str] -> a
  #:
  pushcells = vs ~> for v in vs =>
    if v in @varnames => for i in @fastlocals !! (@varnames !! v) =>
      # All previously inserted `*_FAST` references to that name should be
      # changed to `*_DEREF` to keep the cell contents up-to-date.
      @bytecode !! i = @fastlocals !! (@varnames !! v) !! i, @cellvars !! v

    @append 'LOAD_CLOSURE' delta: +1 $ if
      v in @cellvars => @cellvars !! v
      v in @varnames => @cellvars !! v
      otherwise      => @freevars !! v

  #: Insert a jump clause.
  #:
  #: jump :: str (Optional bool) (Optional int) -> Jump
  #:
  jump = opname reverse: False delta: 0 ~> Jump self reverse opname delta

  #: Make a child code object.
  #:
  #: spawn :: str * ** -> CodeType
  #:
  spawn = name *: args **: kwargs ~> @__class__ cell: self function: True *: args **: kwargs $ if
    @var is None       => name
    @var.isidentifier! => @var
    otherwise          => '(' + @var + ')'
