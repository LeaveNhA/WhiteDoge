import '/re'
import '/collections'


#: Parse an input string.
#:
#: parse :: str (Optional str) -> Node
#:
parse = data filename: '<string>' -> (DgParser data filename).file


#: Parse the contents of a file-like object opened in text mode.
#:
#: parsefd :: TextIOBase (Optional str) -> Node
#:
parsefd = data filename: '<stream>' -> parse (data.read -1) filename


#: A recursive descent parser with a built-in regex-based tokenizer.
#:
#: type Parser < deque Node where
#:   tokens :: iter MatchObject -- see `regex`.
#:   indent :: deque int -- a stack of indentation levels, starting with 0.
#:   lineno :: int -- 1-based line number.
#:   charno :: int -- 1-based character number.
#:   lines  :: list str -- the input, split at line breaks.
#:
Parser = subclass collections.deque where
  __init__ = @data @filename ~>
    @tokens = @regex.finditer @data
    @indent = collections.deque $ list' 0
    @lineno = 1
    @charno = 1
    @lines  = @data.split '\n'
    None

  __iter__ = self -> self
  __next__ = self -> if
    self      => @pop!
    otherwise => except
      err =>
        match = next @tokens
        text  = match.group 0
        pos   = @location

        '\n' in text => @charno = -text.rfind '\n'
        @charno += len text
        @lineno += text.count '\n'
        @token pos match.lastgroup match
      err :: StopIteration => EOFTok

  #: Current location as a tuple.
  #:
  #: location :: (str, int, int, str)
  #:
  location = ~> (@filename, @lineno, @charno, @lines !! (@lineno - 1))

  #: A regex used to tokenize input text.
  #:
  #: regex :: Re
  #:
  regex = re.compile r'''.'''

  #: Handle a single regex match.
  #:
  #: token :: (str, int, int, str) str MatchObject -> Node
  #:
  token = pos groupname match ~> @error 'internal error: no grammar' pos

  #: Handle a parse error.
  #:
  #: error :: str (str, int, int, str) -> _|_
  #:
  error = staticmethod $ description at -> raise $ SyntaxError description at


DgParser = subclass Parser where
  regex = re.compile r'''(?isx)
    (?P<space>  [^\S\n]+|\s*\#[^\n]*)
   |(?P<number> (?P<realnum>
      [+-]?(?:
        (?P<isbin>0b[0-1]   +)
       |(?P<isoct>0o[0-7]   +)
       |(?P<ishex>0x[0-9a-f]+)
       |(?:[0-9]+ (?P<isfloat> (?:\.[0-9]+)? (?:e[+-]?[0-9]+)?))
      )
    )(?P<isimag>j)?)
   |(?P<string>
      (?P<flags>br|r?b?)
      (?P<quote>['"]{3}|['"])
      (?P<content>(?:[^\\]|\\.)*?)
      \11)  # should point to <quote>
   |(?P<strerr> (?:br|r?b?)['"])
   |(?P<name>   \w+'*|\*+(?=:))
   |(?P<infix>  [!$%&*+\--/:<-@\\^|~;]+|,)
   |(?P<eol>    \s*\n(?P<indent>\ *))
   |(?P<block>  \()
   |(?P<end>    \))
   |(?P<iname>  `(?P<iname_>\w+'*)`)
   |.
  '''

  token = pos f m ~> if
    f == 'space'  => next self
    f == 'block'  => @block pos (== Ending ')')
    f == 'end'    => Ending   at: pos ')'
    f == 'name'   => Name     at: pos             $ m.group 0
    f == 'infix'  => Name     at: pos infix: True $ m.group 0
    f == 'iname'  => Name     at: pos infix: True $ m.group 'iname_'
    f == 'string' => Constant at: pos x where
      f = m.group 'flags'
      x = (m.group 'content').encode 'utf-8'
      'r' in f or (x = bytes $ map ord $ x.decode 'unicode-escape')
      'b' in f or (x = x.decode 'utf-8')

    f == 'number' => Constant at: pos $ (if (m.group 'isimag' => 1j) (True => 1)) * if
      m.group 'isfloat' => float (m.group 'realnum')
      m.group 'isbin'   => int   (m.group 'realnum') 2
      m.group 'isoct'   => int   (m.group 'realnum') 8
      m.group 'ishex'   => int   (m.group 'realnum') 16
      otherwise         => int   (m.group 'realnum') 10

    f == 'eol' =>
      level = len $ m.group 'indent'

      if level > last @indent =>
        @indent.append level
        @append $ @block pos closed: False $ x ->
          x :: Ending => x is Dedent or
            # Indented blocks can be ended with close-parens.
            # We have to account for a decrease in indentation, though.
            @indent.pop!
            # A parenthesized block will take `x` off the stack.
            @append x
          x :: Ending

      while level < last @indent =>
        @indent.pop!
        @append $ Name '\n' at: pos
        @append $ Dedent
        if level > last @indent => @error 'no matching indentation level' @location

      Name '\n' at: pos

    f == 'strerr' => @error 'unexpected EOF in a string literal' pos
    otherwise     => @error 'invalid character'                  pos

  #: Parse a complete file.
  #:
  #: file :: Node
  #:
  file = ~> @block (@filename, 1, 1, head @lines) closed: False $ x -> if
    x is EOFTok => True
    x :: Ending => @error 'unexpected close-paren' x.loc

  #: Read tokens until the end of the block.
  #:
  #: pos -- (filename, lineno, charno, first line) of this block.
  #: end -- returns True if a `Node` is an acceptable block end.
  #: closed -- whether the block is encased in hard parentheses.
  #:
  #: block :: (str, int, int, str) (Node -> bool) (Optional bool) -> Node
  #:
  block = pos end closed: True ~>
    result = Constant at: pos $ if (closed => tuple!) (otherwise => None)
    isexpr = False

    while not $ end (x = next self) => if
      x is EOFTok => @error 'unexpected EOF in a block'          pos
      x is Dedent => @error 'broken indentation in this block'   pos
      x :: Ending => @error 'this block was not closed properly' pos
      isexpr      => result = @infix (Name '' at: x.loc) result x
      x != '\n'   => result, isexpr = @special x, True

    result.closed |= closed
    result.indent  = not closed
    result

  #: Combine two parts of a tree with an infix `Name`.
  #:
  #: infix :: Name Node Node -> Node
  #:
  infix = op lhs rhs ~>
    br = False

    not op.norhs => while rhs == '\n' =>
      # There are some special cases for indented rhs,
      # so we'll have to ignore the line breaks for now.
      br, rhs = rhs, next self

    rhs.nolhs and not rhs.closed =>
      # Got to handle that first, as the empty operator may not have
      # enough binding strength for that later.
      rhs = @infix (Name '' at: rhs.loc) rhs $ next self

    if
      rhs :: Ending or op.norhs =>
        @append rhs
        op != '' => lhs = @infixin op lhs None
        lhs

      br and not rhs.indent =>
        op != '' => lhs = @infixin op lhs None
        @infixin br lhs rhs

      rhs.infix and not rhs.closed and (op == '' or not (rhs > op)) =>
        op != '' => lhs = @infixin op lhs None
        @infix rhs lhs $ next self

      otherwise => @infixin op lhs rhs

  #: Recursively descend into `lhs` to apply infix precedence rules.
  #:
  #: infixin :: Name Node (Maybe Node) -> Expression
  #:
  infixin = op lhs rhs ~> if
    lhs :: Expression and not lhs.closed and op > lhs.op =>
      lhs.args.append $ @infixin op (lhs.args.pop -1) rhs
      lhs

    rhs is None =>
      LeftBind op lhs closed: True at: lhs.loc

    lhs :: Expression and not lhs.closed and op.varary and op == lhs.op =>
      lhs.args.extend $ tail (@make_call op lhs rhs).args
      lhs

    op == '' and lhs.infix and not lhs.closed =>
      RightBind lhs at: lhs.loc $ if (Name '' > lhs => @special rhs) (otherwise => rhs)

    otherwise => @make_call op lhs rhs

  #: Create a simple function call. (Almost) no fancy rules.
  #:
  #: make_call :: Name Node Node -> Expression
  #:
  make_call = op lhs rhs ~> if
    op == '' and not rhs.closed and rhs :: Expression and rhs.op == '\n' =>
      # If a function call is followed by an indented block,
      # each statement is treated as an argument.
      Expression op lhs at: lhs.loc *: rhs.args
    otherwise =>
      Expression op lhs at: lhs.loc $ if
        Name '' > op => @special rhs
        otherwise    => rhs

  #: Handle a couple of fancy syntactic constructs.
  #:
  #: special :: Node -> Node
  #:
  special = x ~> if
    # These nodes consume everything until the next fat arrow.
    # "f X =>" becomes equivalent to "(X) `f`".
    x.flags & 1 => @infix x (@block x.loc ('=>' ==)) (next self)
    # These nodes consume everything until the EOL.
    # "f ...\n" => "f (...)\n".
    x.flags & 2 =>
      arg = @block x.loc closed: False $ y ->
        end = y :: Ending or y == '\n'
        end => @append y
        end

      if arg == Constant None => x
         otherwise => @infixin (Name '' infix: True at: arg.loc) x arg
    otherwise => x
