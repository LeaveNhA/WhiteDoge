import '/importlib'
import '/itertools'
import '/posixpath'

inf = float 'inf'


#: Compile some source code.
#:
#: compile :: str (Optional str) -> types.CodeType
#:
compile = data filename: '<string>' -> compileast $ parse data filename


#: Compile the contents of a file-like object.
#:
#: compilefd :: TextIOBase (Optional str) -> types.CodeType
#:
compilefd = fd filename: '<stream>' -> compileast $ parsefd fd filename


#: Compile an AST into Python bytecode.
#:
#: compileast :: Node -> types.CodeType
#:
compileast = x ->
  @ = Compiler ''
  @symbols x |> exhaust  # Global variables don't need to be tracked (unless
  @pushast x             # you want some static checks...), but `symbols`
  @append 'RETURN_VALUE' delta: -1  # may do some preprocessing, too.
  @frozen


#: Enforce arbitrary argument count limits on a compile-time function.
#:
#: fix :: int int Handler -> Handler
#:
fix = min max h -> f args ~>
  len args < min => raise $ f.invalid $ 'got {} arguments, min. {}'.format (len args) min
  len args > max => raise $ f.invalid $ 'got {} arguments, max. {}'.format (len args) max
  h self f args


#: Make a handler update its first argument with the result.
#: Use `fix` to ensure at least one argument!
#:
#: inplace :: Handler -> Handler
#:
inplace = h -> f xs ~>
  h self f xs
  @append 'DUP_TOP' delta: +1
  @popast $ head xs


#: Turn a handler that accepts pairs or nodes into one that accepts `u => v` nodes.
#:
#: pair_args :: (Node [(Node, Node)] -> a) -> Handler
#:
pair_args = h -> f xs ~>
  pairs = getattr f '_arrpairs' None
  pairs is None =>
    # In `if` and `except` the whole first line is clamped into a single argument,
    # so `if (1 => 2) (3 => 4)` is the same thing as `if ((1 => 2) (3 => 4))`.
    # We're gonna treat these as separate argument for a shorthand notation.
    if len xs == 1 and head xs :: Expression and (head xs).op == '' => xs = (head xs).args
    # This decorator needs to be applied to both the emitter function
    # AND the symbol scanner, so we'll cache the result.
    pairs = f._arrpairs = list
      where for x in xs => yield $ if
        x :: RightBind  and x.op == '=>' => raise $ x. invalid 'no `u` in `u => v`'
        x :: LeftBind   and x.op == '=>' => x.args + list' (Constant x.loc None)
        x :: Expression and x.op == '=>' => x.args
        otherwise => raise $ x.invalid 'expected `u => v`'
  h self f f._arrpairs


#: Raise a `SyntaxError` regardless of arguments.
#:
#: undefined :: str -> Handler
#:
undefined = x -> f xs ~> raise $ f.invalid x


#: Apply a single bytecode instruction to all arguments. The number of arguments
#: is passed as an oparg.
#:
#: apply_one :: str -> Handler
#:
apply_one = x -> f xs ~>
  @pushast *: xs
  @append x (len xs) $ 1 - len xs


#: Given two arguments, pick the first iff it matches a jump condition.
#:
#: either :: str -> Handler
#:
either = x -> fix 2 2 $ f (a, b) ~>
  @pushast a
  with @jump x False -1 => @pushast b


#: Given two arguments, return the result of comparing them with a suitable
#: function. Note that the function must be in `dis.cmp_op`.
#:
#: compare :: Handler
#:
compare = fix 2 2 $ f (a, b) ~>
  chain = []
  # `a R x1 Q x2 ... xn P b` where `R`, `Q`, and so on are comparison operators
  # is a single chain that is equivalent to `a R x1 and ... and xn P b`.
  while a :: Expression and not a.closed and @prefix.get a.op.value is compare =>
    # `chain` should become `[(R, x1), (Q, x2), ...]`.
    chain.insert 0 (a.op, snd (a, _ = a.args))

  @pushast a
  jumps = []
  for (op, arg) in chain =>
    # Assume the value on top of the stack is what to compare to.
    # (Let's call that value `prev`.)
    @pushast arg
    @append  'DUP_TOP'    delta: +1  #=> prev, arg, arg
    @append  'ROT_THREE'  delta: +0  #=> arg, prev, arg
    @append  'COMPARE_OP' delta: -1 $ dis.cmp_op.index op.value  #=> arg, bool
    jumps.append $ @jump 'POP_JUMP_IF_FALSE' delta: -1  #=> arg
  @pushast b
  @append 'COMPARE_OP' delta: -1 $ dis.cmp_op.index f.value
  # If all comparisons returned `True`, we're done and there's `True` on top
  # of the stack. If comparison with `b` returned `False`, there's `False`
  # and nothing else. But if one of the other comparisons returned `False`,
  # we've got an object that is not needed anymore.
  if jumps => with @jump 'JUMP_FORWARD' =>
    for j in jumps => j.set
    @append 'POP_TOP' delta: -1
    @pushconst False


#: Parse function definition arguments. They look like this:
#:
#:   positional (positional, pattern): default *: varargs keyword_only **: varkwargs
#:
#: parse_defn_args :: Node -> ([str], [str], [Node], {str: Node}, [str], [str], {str: Node})
#:
parse_defn_args = xs -> a, kw, da, dkw, va, vkw, add where
  a    = []  # positional
  kw   = []  # keyword-only
  da   = []  # default values
  dkw  = {}  # default values for keyword-only arguments
  va   = []  # varargs (a singleton)
  vkw  = []  # varkwargs (a singleton)
  add  = {}  # (name -> pattern) mapping

  pattern = x index -> if
    not $ x :: Name =>
      name = 'pattern:' + str index
      add !! name = x
      name
    x == '_'         => 'ignore:' + str index
    # If there are duplicate argument names, CPython will overwrite some locals,
    # and that's bad. We don't check `vkw` because it should always be the
    # last item, though.
    x in a + kw + va => raise $ x.invalid 'duplicate argument name'
    otherwise        => x.value

  # Consider `x -> x`. Here `x` is a single argument, thus a single `Node`.
  # Now consider `x y -> x`. Here `x y` is, technically, a function call?..
  data = if xs :: Expression and not xs.closed and xs.op == '' => xs.args
            otherwise => [xs,]

  for (i, x) in enumerate data => if
    # Variadic keyword is pretty much a catch-all argument,
    # so it doesn't make sense to have anything after it.
    vkw => raise $ x.invalid 'all arguments should come before `**: varkwargs`'
    # `k: v` -- argument named `k` with default value `v`
    x :: Expression and not x.closed and x.op == ':' => if
      x :: LeftBind  => raise $ x.invalid 'default value missing'
      x :: RightBind => raise $ x.invalid 'argument name missing'
      fst x.args == '*' =>
        # `*: x` -- function is variadic with argument list `x`.
        va => raise $ x.invalid 'can only have one `*: x`'
        va.append $ snd x.args `pattern` i
      fst x.args == '**' =>
        # `**: x` -- function is keyword-variadic with keyword mapping `x`.
        vkw.append $ snd x.args `pattern` i
      va =>
        # Doesn't make sense to have any positional arguments after `*: varargs`,
        # either. Anything after it becomes a keyword-only argument.
        k, v = x.args
        k :: Name or raise (k.invalid 'keyword-only arguments cannot be patterns')
        # So what's a keyword argument? When calling a function, you can
        # pass arguments by position (e.g. `f 1 2 3`) or by name
        # (e.g. `f c: 3 a: 1 b: 2`). If a function is variadic, at some point
        # the positional arguments start being added to the list. Any argument
        # defined after `*: something` can therefore only be passed by name.
        kw.append (name = k `pattern` i)
        dkw !! name = v
      otherwise =>
        a.append  $ fst x.args `pattern` i
        da.append $ snd x.args
    va =>
      # And, unfortunately, you can't call a function like `f (some, pattern): value`.
      # So a keyword-only pattern would be unusable.
      x :: Name or raise (x.invalid 'keyword-only arguments cannot be patterns')
      # Still have to call `pattern` to ensure uniqueness, though.
      kw.append $ x `pattern` i
    # In CPython, it's impossible to have an argument without a default value
    # follow an argument without one, because default values are stored
    # as a tuple.
    da => raise $ x.invalid 'this argument must have a default value'
    otherwise => a.append $ x `pattern` i
  # And we hit the limitations of 2-byte opargs. Great.
  len a  > 255 => raise $ xs.invalid 'too many positional arguments'
  len kw > 255 => raise $ xs.invalid 'too many keyword arguments'


Compiler = subclass CodeType where
  __init__ = *: args **: kwargs ~>
    @@__init__ *: args **: kwargs
    @loops = list!  # Jumps to the beginnings of loops we're currently in. Used by `continue`.
    @unsafe = set!  # Variables used to store exceptions. May cause reference loops.
    @docstr = None  # The docstring to attach to the next function.
    # For some reason, CPython requires that `__init__` returns None.
    # Why can't it simply ignore the return value?
    None

  #: Push the results of evaluating some expressions onto the stack.
  #:
  #: pushast :: Node... -> a
  #:
  pushast = *: xs ~> for x in xs =>
    x.loc => if
      @lineoff == -1 =>
        @filename = x.loc !! 0
        @lineno   = x.loc !! 1
        @lineoff  = x.loc !! 1
      otherwise =>
        # The offset starts at 0, the line number - at `co_firstlineno`.
        # To find out the next offset, read two bytes from `co_lnotab`,
        # Add the first byte to the offset, and the second byte to the line no.
        lineoff = x.loc !! 1 - @lineoff
        lineoff > 0 =>
          # Every opcode that is in `co_code[offset:next offset]` is assumed to be
          # a part of some expression on that line.
          byteoff = codelen $ drop @byteoff @bytecode
          byteoff > 0 =>
            @lineoff = x.loc !! 1
            @byteoff = len @bytecode
            # Naturally, these being bytes, they're limited to increments of 0..255.
            # They can't go back, too, presenting some problems in `where` and
            # function calls that span multiple lines, as the traceback will always
            # point to the last line while the error is actually in the first.
            @lnotab += lineoff // 256 * b'\x00\xff'
            @lnotab += byteoff // 256 * b'\xff\x00'
            @lnotab += bytes (byteoff % 256, lineoff % 256)

    x.doc => @docstr = x.doc
    if x :: Name       => @pushname  x.value at: x.loc
       x :: Constant   => @pushconst x.value
       x :: LeftBind   => @pushbind  False x.op *: x.args
       x :: RightBind  => @pushbind  True  x.op *: x.args
       x :: Expression => @pushcall  x.op *: x.args
       otherwise       => raise $ TypeError 'invalid node' $ type x
    x.doc => @docstr = None

  #: Push some string-object pairs. Used by keyword arguments and annotations.
  #:
  #: pushmap :: {str: Node} -> a
  #:
  pushmap = xs ~> for (k, v) in xs.items! =>
    @pushconst k
    @pushast   v

  #: Evaluate multiple expressions, discarding all results but the last.
  #:
  #: pushlast :: *Node -> a
  #:
  pushlast = *: (*xs, y) ~>
    for x in xs =>
      @pushast x
      @append 'POP_TOP' delta: -1
    @pushast y

  #: Create a function out of a code object.
  #:
  #: pushclosure :: CodeType [Node] (dict str Node) -> a
  #:
  pushclosure = code defaults kwdefaults ~>
    for (k, i) in code.unsafe => not $ k in code.cellvars =>
      # Break reference loops caused by variables which may reference this frame.
      code.pushconst None
      code.append 'STORE_FAST' i delta: -1
    code.append 'RETURN_VALUE' delta: -1
    const = code.frozen
    @pushmap  kwdefaults
    @pushast *: defaults
    @pushcells const.co_freevars
    @append    'BUILD_TUPLE' (len const.co_freevars) $ 1 - len const.co_freevars
    @pushconst const
    @pushconst code.qualname
    @append    'MAKE_CLOSURE'
      0 + len defaults + 256 * len kwdefaults
      0 - len defaults - 2   * len kwdefaults - 2

  #: Push the result of calling `f` with `args` onto the value stack.
  #:
  #: pushcall :: Node *Node -> a
  #:
  pushcall = f *: args ~> if
    f :: Name and f.value in @prefix => (@prefix !! f.value) self f args
    # Infix functions don't get fancy syntax.
    # When using infix operators, varargs and keyword arguments are disabled.
    f.infix and not f.closed =>
      @pushast  f
      @pushast *: args
      @append 'CALL_FUNCTION' (len args) (-len args)
    otherwise =>
      @pushast f
      @pushcalltop 0 args

  #: Push the result of calling a function from the top of the stack.
  #:
  #: Additional arguments may be taken from there, too.
  #:
  #: pushcalltop :: int [Node] -> a
  #:
  pushcalltop = argc argv ~>
    kw = {}

    for x in argv => if
      x :: Expression and x.op == ':' => if
        x :: LeftBind      => raise $ x.invalid 'keyword argument without a value'
        x :: RightBind     => raise $ x.invalid 'keyword argument without a name'
        fst x.args in kw   => raise $ x.invalid 'keyword arguments should be unique'
        fst x.args :: Name => kw !! (fst x.args).value = snd x.args
        otherwise          => raise $ x.invalid 'keyword arguments cannot be patterns'
      otherwise => @pushast x

    argc += len argv - len kw
    va  = kw.pop '*'  None
    vkw = kw.pop '**' None
    argc   > 255 => raise $ (head argv).invalid 'too many positional arguments'
    len kw > 255 => raise $ (head argv).invalid 'too many keyword arguments'

    @pushmap kw
    va  => @pushast va
    vkw => @pushast vkw
    @append
      'CALL_FUNCTION' + '_VAR' * bool va + '_KW' * bool vkw
      0 + argc + 256 * len kw
      0 - argc - 2   * len kw - bool va - bool vkw

  #: Default infix bind implementation.
  #:
  #: `x R` <=> `y -> x R y`
  #: `R x` <=> `y -> y R x`
  #:
  #: pushbind :: bool Node Node -> a
  #:
  pushbind = right f arg ~> if
    f.value in @infixl and not right => (@infixl !! f.value) self f arg
    f.value in @infixr and     right => (@infixr !! f.value) self f arg
    f.value in @prefix and not (f.value in BUILTINS) =>
      # Note that partial binding of macros does not actually use
      # runtime functions (as `pushcall` will prefer compile-time ones.)
      # Still, this is a pretty good method of checking if
      # someone's attempting to partially bind assignment operators, etc.
      raise $ f.invalid 'this operator requires both arguments'
    otherwise =>
      c = if right     => @spawn f.value ('<L>',) ('<R>',)
             otherwise => @spawn f.value ('<R>',) ('<L>',)
      c.pushcall f (Name f.loc False '<L>') (Name f.loc False '<R>')
      @pushclosure c tuple! $ dict' $ if right     => '<R>', arg
                                         otherwise => '<L>', arg

  #: Create a function.
  #:
  #: pushfunc :: Node Node -> a
  #:
  pushfunc = args body ~> @pushfunc' body *: (parse_defn_args args)

  #: Create a function with known arguments.
  #:
  #: pushfunc' :: Node [str] [str] [Node] (dict str Node) [str] [str] (dict str Node) -> a
  #:
  pushfunc' = body a kw da dkw va vkw patterns ~>
    g = @spawn '<lambda>' a kw va vkw doc: @docstr
    g.regsyms body
    a and a !! 0 == 'self' =>
      # This is most likely a method, and methods can use `super`.
      # To determine which class we're looking for the superclass of,
      # `super` uses a hidden free variable named `__class__` which is initialized
      # with the class object.
      g.freevars !! '__class__'
      @cellvars  !! '__class__'
    for (_, v) in patterns.items! => for a in @symbols' v => g.varnames !! a
    for (k, v) in patterns.items! =>
      g.pushname k
      g.popast   v
    g.pushast body
    @pushclosure g da dkw

  #: Create a method (a function with an additional argument named "self".)
  #:
  #: pushmethod :: Node Node -> a
  #:
  pushmethod = args body ~>
    a, *xs = parse_defn_args args
    a.insert 0 'self'
    @pushfunc' body a *: xs

  #: Push a result of try-except-finally onto the stack.
  #:
  #: Returns the same value as `pushexcept`. `finally` is evaluated in the end,
  #: but the value it returns is ignored.
  #:
  #: pushfinally :: Node Node [(Node, Node)] Node -> a
  #:
  pushfinally = name try cases finally ~>
    # Blindly copied from Python by `diff`ing
    # disassembly of code with `finally` and without one.
    with @jump 'SETUP_FINALLY' delta: +3 =>
      @pushexcept name try cases
      @append 'POP_BLOCK'
      @pushconst None
    # `break` and `continue` should not be used in `finally`.
    _loops, @loops = @loops, list!
    @pushast finally
    @loops = _loops
    @append 'POP_TOP'     delta: -1
    @append 'END_FINALLY' delta: -4

  #: Push a result of try-except onto the stack.
  #:
  #: If any condition matched, the assigned action is evaluated and its value
  #: returned. If not, but no exception was raised, the value of `try` is
  #: returned instead. (`name` is where the exception [or None] is stored.)
  #:
  #: pushexcept :: Node Node [(Node, Node)] -> a
  #:
  pushexcept = name try cases ~>
    main = @jump 'SETUP_EXCEPT' delta: +8  # +what?
    @pushast try
    @append 'ROT_TWO'   delta: +0
    @append 'POP_BLOCK' delta: -1
    # There was no exception, we'll store None instead.
    # The second one will be used to skip over POP_EXCEPT or
    # consumed by END_FINALLY.
    @pushconst None
    @pushconst None
    @popast name
    # Exceptions reference tracebacks which reference frames which reference local
    # variables which an exception is, causing a reference loop that defers all destructors
    # until the next GC sweep. We're going to break that loop.
    name :: Name and name.value in @varnames => @unsafe.add (name.value, @varnames !! name.value)

    with @jump 'JUMP_FORWARD' =>
      # Finishing SETUP_EXCEPT with an exception pushes
      # 3 items onto the stack: traceback, value, type.
      # Value needs to be stored in `name`.
      main.set
      @append 'ROT_TWO' delta: +0
      @append 'DUP_TOP' delta: +1
      @popast name
      @append 'ROT_TWO' delta: +0
      @pushconst True  # This will trigger POP_EXCEPT.

    jumps = list
      where for (cond, action) in cases =>
        @pushast cond
        with @jump 'POP_JUMP_IF_FALSE' delta: -1 =>
          @pushast action
          yield $ @jump 'JUMP_FORWARD' delta: -1

    # Disable POP_EXCEPT by popping True off the stack.
    # Only happens if there was an exception.
    with @jump 'JUMP_IF_FALSE_OR_POP' delta: -1 => None
    # This will re-raise the exception if there was one.
    # Otherwise, it will pop None off the stack.
    @append 'END_FINALLY' delta: -9

    with @jump 'JUMP_FORWARD' =>
      # If a handler was triggered, there's now a return value
      # on top of the stack. It needs to be stored for safekeeping.
      for j in jumps => j.set
      @append 'STORE_FAST' $ @varnames !! '<except-result>'
      # Traceback, value, and type may still be on stack.
      # They didn't stop existing or anything.
      with @jump 'POP_JUMP_IF_FALSE' => @append 'POP_EXCEPT'
      @append 'POP_TOP'  # There goes the result of the try clause.
      @append 'LOAD_FAST'   $ @varnames !! '<except-result>'
      @append 'DELETE_FAST' $ @varnames !! '<except-result>'

  #: Check that a binary condition holds for items on top of the stack.
  #: If not, throw an exception (by name.)
  #:
  #: assert2 :: str (-> b) -> a
  #:
  assert2 = err check ~>
    @append 'DUP_TOP_TWO' delta: +2
    check!              # delta: -1
    with @jump 'POP_JUMP_IF_TRUE' delta: -1 =>
      @pushname err
      @append   'ROT_THREE'
      @append   'CALL_FUNCTION' 2 delta: +0  # Technically, it's -2, but that
      @append   'RAISE_VARARGS' 1 delta: -1  # would bring the total to -2.

  #: Pop a value off the stack and store it somewhere.
  #:
  #: popast :: Node -> a
  #:
  popast = x ~> if
    x :: Name => @popname $ if
      x == '@'  => 'self'
      x == '@@' => raise $ x.invalid 'cannot assign to superclass'
      otherwise => x.value

    x :: Constant or (x :: Name and x in CONSTANTS) =>
      @pushast x
      @assert2 'ConstantPatternError' $ -> @append 'COMPARE_OP' delta: -1 $ dis.cmp_op.index '=='
      @append 'POP_TOP' delta: -1
      @append 'POP_TOP' delta: -1

    x :: LeftBind => if
      x.op == ',' =>
        @append 'UNPACK_SEQUENCE' 1
        @popast $ fst x.args

      x.op == '!' =>
        @pushast $ fst x.args
        @assert2 'InstancePatternError' $ ->
          @pushname '::'
          @append   'ROT_THREE'
          @append   'CALL_FUNCTION' 2 delta: -2
        @append 'POP_TOP' delta: -1
        @append 'POP_TOP' delta: -1
      otherwise => raise $ x.invalid 'not something one can assign to'

    x :: RightBind => if
      # A single item prefixed with an at sign is a shorthand
      # for attribute assignment. That is, `self.attribute = ...`.
      x.op == '@' =>
        attr, = x.args
        attr :: Name or raise (attr.invalid 'not an attribute')
        @pushname 'self' at: x.loc
        @append   'STORE_ATTR' delta: -2 $ @names !! attr.value

      x.op == '@@' => raise $ x.invalid 'cannot assign superclass attributes'

      # A single item prefixed with a star.
      # In a comma-separated list, that is an instruction to put excess
      # items in this variable as a list. When there are no other elements,
      # however, the star does nothing.
      x.op == '*' => @popast $ head x.args
      otherwise   => raise $ x.invalid 'not something one can assign to'

    x :: Expression => if
      # T a b c = x
      # => not $ x :: T => raise PatternError
      #    a, b, c = x
      x.op == '' =>
        x.op.value = ','
        @pushast $ x.args.pop 0
        @assert2 'InstancePatternError' $ ->
          @pushname '::'
          @append   'ROT_THREE'
          @append   'CALL_FUNCTION' 2 delta: -2
        @append 'POP_TOP' delta: -1
        @popast x

      # x: y = z
      # => x = y = z
      x.op == ':' =>
        @append 'DUP_TOP' delta: 1
        @popast $ fst x.args
        @popast $ snd x.args

      # A comma-separated list of assignment targets.
      #   1. Assume the value on top of the stack is an iterable.
      #   2. Split it into separate items.
      #   3. Store each of them in an assignment target from this list.
      x.op == ',' =>
        sz = len x.args
        qs = list (where for (i, q) in enumerate x.args =>
          if q :: RightBind and q.op == '*' => yield i)

        if len qs > 1 => raise $ (x.args !! (qs !! 1)).invalid 'cannot unpack into more than 1 list'
           len qs < 1 => @append delta: (sz - 1) 'UNPACK_SEQUENCE' sz
           otherwise  => @append delta: (sz - 1) 'UNPACK_EX' $ i + 256 * (sz - i - 1) where
             i = head qs
        for a in x.args => @popast a

      x.op == '.' =>
        item, attr = x.args
        attr :: Name or raise (attr.invalid 'not an attribute')
        @pushast item
        @append  'STORE_ATTR' delta: -2 $ @names !! attr.value

      x.op == '!!' =>
        @pushast *: x.args
        @append   'STORE_SUBSCR' delta: -3
      otherwise => raise $ x.invalid 'not something one can assign to'
    otherwise => raise $ x.invalid 'not something one can assign to'

  #: Push something, then store it somewhere.
  #:
  #: pushpop :: Node Node -> a
  #:
  pushpop = name value ~>
    @var, x = repr name, @var
    @pushast value
    @var = x
    @append 'DUP_TOP' delta: +1
    @popast name

  #: Given an AST, find out which local variables it creates.
  #:
  #: symbols :: Node... -> iter str
  #:
  symbols = *: xs ~> for x in xs =>
    # Only expressions may create variables.
    x :: Expression => yield from $ if
      # Compile-time macros may override symbol scans in a way similar to using `prefix`
      # (see below.)
      x.op :: Name and x.op.value in @symscan => (@symscan !! x.op.value) self x.op x.args
      # Default behavior is to push the function, then push the arguments, so we scan them.
      otherwise => @symbols x.op *: x.args

  #: Symbol scanner for `popast`. Returns an iterator of modified variables.
  #:
  #: symbols' :: Node... -> iter str
  #:
  symbols' = *: xs ~> for x in xs => if
    x :: Expression => if
      x.op == ',' => yield from $ @symbols' *: x.args
      x.op == '*' => yield from $ @symbols' *: x.args
      x.op == ':' => yield from $ @symbols' *: x.args
      x.op == ''  => yield from $ @symbols' *: (tail x.args)
      otherwise   => yield from $ @symbols x
    x :: Name => if
      x == '@'  => yield 'self'
      x == '@@' => yield 'self'
      otherwise => yield x.value

  #: Ensure an AST can have access to all local variables it needs.
  #:
  #: regsyms :: Node -> a
  #:
  regsyms = x ~> for n in @symbols x => @varnames !! n

  symscan = dict'
    '', f args ~> @symbols $ Expression f.loc *: args
    '->',    _ _ ~> ()  # These operators create new functions, with brand new
    '~>',    _ _ ~> ()  # local namespaces. They will call `symscan` on their own.
    'where', _ _ ~> ()

    '=', fix 2 2 $ f (n, x) ~>
      yield from $ @symbols' n
      yield from $ @symbols  x

    ':=', fix 2 2 $ f (n, x) ~>
      yield from $ filter (not <- (in @enclosed)) $ @symbols' n
      yield from $ @symbols x

    'for', fix 1 2 $ f (var, *body) ~>
      not $ var :: Expression and var.op == 'in' and len var.args == 2 => raise $ var.invalid $ if
        # In Python, `in` has a higher precedence than `,`. That is,
        # if you simply write `a, b in c` you get `a, (b in c)`. `for a, b in c:`
        # is merely a special case in the parser; dg has no such thing.
        var :: Expression and var.op == ',' and not var.closed => 'forgot the parentheses?'
        otherwise => 'should be `for a in b => ...`'
      v, e = var.args
      yield from $ @symbols' v
      yield from $ @symbols  e *: body

    'except', fix 1 inf $ pair_args $ f ((e, x), *y) ~>
      yield from $ @symbols' e
      yield from $ @symbols  x
      for t in y => yield from $ @symbols *: t

    'import', fix 1 inf $ f (name, *flags) ~>
      qual   = False
      pure   = False
      reload = False
      parent = None

      for flag in flags => if
        flag == 'qualified' => qual   = True
        flag == 'pure'      => pure   = True
        flag == 'reload'    => reload = True
        otherwise => raise $ flag.invalid 'unsupported `import` modifier'

      if
        name :: Constant and name.value :: str =>
          parent, name = except
            err => __dg_parse_import__ name.value
            err :: ImportError => raise $ name.invalid $ str err
          yield $ name !! (-not qual)
        otherwise => yield from $ @symbols name
      f._impdata = parent, name, qual, pure, reload

  prefix = dict'
    '',    f xs ~> @pushcall *: xs
    '\n',  f xs ~> @pushlast *: xs
    '=',   fix 2 2 $ f (name, value) ~> @pushpop name value
    ':=',  fix 2 2 $ f (name, value) ~> @pushpop name value
    '->',  fix 2 2 $ f (args, body)  ~> @pushfunc   args body
    '~>',  fix 2 2 $ f (args, body)  ~> @pushmethod args body
    '!!~', fix 2 2 $ f (coll, item)  ~>
      @pushast   coll
      @pushast   item
      @append    'DELETE_SUBSCR' delta: -2
      @pushconst None

    ':',      undefined 'keyword argument to what function?'
    '!',      undefined 'this operator is postfix'
    '~',      undefined 'this operator is prefix'
    '@',      undefined 'this operator is prefix'
    '@@',     undefined 'this operator is prefix'
    ',',      apply_one 'BUILD_TUPLE'
    "set'",   apply_one 'BUILD_SET'
    "list'",  apply_one 'BUILD_LIST'
    "tuple'", apply_one 'BUILD_TUPLE'
    'or',     either 'JUMP_IF_TRUE_OR_POP'
    '=>',     either 'JUMP_IF_FALSE_OR_POP'
    'and',    either 'JUMP_IF_FALSE_OR_POP'
    'not',    fix 1 1 $ apply_one 'UNARY_NOT'
    '!!',     fix 2 2 $ apply_one 'BINARY_SUBSCR'
    '+',      fix 2 2 $ apply_one 'BINARY_ADD'
    '-',      fix 2 2 $ apply_one 'BINARY_SUBTRACT'
    '*',      fix 2 2 $ apply_one 'BINARY_MULTIPLY'
    '**',     fix 2 2 $ apply_one 'BINARY_POWER'
    '/',      fix 2 2 $ apply_one 'BINARY_TRUE_DIVIDE'
    '//',     fix 2 2 $ apply_one 'BINARY_FLOOR_DIVIDE'
    '%',      fix 2 2 $ apply_one 'BINARY_MODULO'
    '&',      fix 2 2 $ apply_one 'BINARY_AND'
    '^',      fix 2 2 $ apply_one 'BINARY_XOR'
    '|',      fix 2 2 $ apply_one 'BINARY_OR'
    '<<',     fix 2 2 $ apply_one 'BINARY_LSHIFT'
    '>>',     fix 2 2 $ apply_one 'BINARY_RSHIFT'
    '!!=',    fix 2 2 $ inplace $ apply_one 'BINARY_SUBSCR'
    '+=',     fix 2 2 $ inplace $ apply_one 'INPLACE_ADD'
    '-=',     fix 2 2 $ inplace $ apply_one 'INPLACE_SUBTRACT'
    '*=',     fix 2 2 $ inplace $ apply_one 'INPLACE_MULTIPLY'
    '**=',    fix 2 2 $ inplace $ apply_one 'INPLACE_POWER'
    '/=',     fix 2 2 $ inplace $ apply_one 'INPLACE_TRUE_DIVIDE'
    '//=',    fix 2 2 $ inplace $ apply_one 'INPLACE_FLOOR_DIVIDE'
    '%=',     fix 2 2 $ inplace $ apply_one 'INPLACE_MODULO'
    '&=',     fix 2 2 $ inplace $ apply_one 'INPLACE_AND'
    '^=',     fix 2 2 $ inplace $ apply_one 'INPLACE_XOR'
    '|=',     fix 2 2 $ inplace $ apply_one 'INPLACE_OR'
    '<<=',    fix 2 2 $ inplace $ apply_one 'INPLACE_LSHIFT'
    '>>=',    fix 2 2 $ inplace $ apply_one 'INPLACE_RSHIFT'
    'is',     compare
    'in',     compare
    '<',      compare
    '<=',     compare
    '==',     compare
    '!=',     compare
    '>=',     compare
    '>',      compare

    '.', fix 2 2 $ f (x, y) ~>
      y :: Name or raise (y.invalid 'not an attribute')
      @pushast x
      @append  'LOAD_ATTR' $ @names !! y.value

    '|>.', fix 2 2 $ f (x, y) ~>
      y :: Name or raise (y.invalid 'not an attribute')
      @pushast x
      @append  'LOAD_ATTR' $ @names !! y.value

    '!.', fix 2 2 $ f (x, y) ~>
      y :: Name or raise (y.invalid 'not an attribute')
      @pushcall x
      @append   'LOAD_ATTR' $ @names !! y.value

    '.~', fix 2 2 $ f (x, y) ~>
      y :: Name or raise (y.invalid 'not an attribute')
      @pushast   x
      @append    'DELETE_ATTR' delta: -1 $ @names !! y.value
      @pushconst None

    '$', fix 2 2 $ f (g, x) ~> if
      g :: Expression and not g.closed and g.op == '' => @pushcall g.op *: (g.args+:x)
      otherwise => @pushcall g x

    '<|', fix 2 2 $ f (g, x) ~> if
      g :: Expression and not g.closed and g.op == '' => @pushcall g.op *: (g.args+:x)
      otherwise => @pushcall g x

    '|>', fix 2 2 $ f (x, g) ~> if
      g :: Expression and not g.closed and g.op == '' => @pushcall g.op *: (g.args+:x)
      otherwise => @pushcall g x

    #: Import a module given a POSIX-style path.
    #:
    #: import '/sys'                 imports a module named 'sys'
    #: import '/os/path' qualified   imports a module named 'os' with a submodule 'path'
    #: import '/dg/addon/fork'       imports 'fork' from package 'dg.addon'
    #: import 'markup'               imports 'markup' from the current package
    #: import 'smth' pure            imports 'smth', but does not create a new variable
    #: import 'smth' pure reload     as above, but re-evaluates the module even if it
    #:                               was previously imported
    #:
    'import', fix 1 inf $ f (name, *flags) ~>
      parent, path, qual, pure, reload = f._impdata

      if
        parent is None or reload =>
          # No opcode allows us to reload the module.
          @pushname '__dg_import__'
          if not $ parent is None => @pushconst (parent, tuple path)
             otherwise =>
               @pushname '__dg_parse_import__'
               @pushast path
               @append 'CALL_FUNCTION' 1 delta: -1
          @pushname  '__package__'
          @pushconst qual
          @pushconst reload
          @append 'CALL_FUNCTION' 4 delta: -4

        qual or (parent == 0 and len path == 1) =>
          @pushconst parent
          @pushconst None
          @append    'IMPORT_NAME' delta: -1 $ @names !! '.'.join path

        otherwise =>
          *dir, file = path
          @pushconst parent
          @pushconst (file,)
          @append    'IMPORT_NAME' delta: -1 $ @names !! '.'.join dir
          @append    'IMPORT_FROM' delta:  1 $ @names !! file
          @append    'ROT_TWO'     delta:  0
          @append    'POP_TOP'     delta: -1

      not pure =>
        parent is None => raise $ path.invalid 'non-pure imports should be constant'
        @append 'DUP_TOP' delta: +1
        @popast $ Name name.loc False $ path !! (-not qual)

    #: Local binding.
    #:
    #: I.e. `a where b` makes stuff from `b` only visible in `a`.
    #:
    'where', fix 2 2 $ f (ret, env) ~>
      g = @spawn '<lambda>' doc: @docstr
      g.regsyms  env
      g.regsyms  ret
      g.pushlast env ret
      @pushclosure g tuple! dict!
      @append 'CALL_FUNCTION' 0

    #: Type creation.
    #:
    #: Duplicate the local namespace and turn it into a type. `where` is useful here.
    #:
    'subclass', f args ~>
      @pushname  '__dg_build_class__'
      @pushname  '__name__'
      @pushname  '__dg_locals__'
      @append    'CALL_FUNCTION' 0
      @pushconst @docstring
      @pushconst @qualname
      @pushconst @name
      @pushcalltop 5 args
      # `super` uses this hidden cell variable to determine which class to look at.
      @append 'DUP_TOP' delta: +1
      @append 'STORE_DEREF' (@cellvars !! '__class__') delta: -1

    #: Automatic context managing.
    #:
    #: I think it's called IDisposable or something.
    #:
    'with', fix 2 2 $ f (ctx, body) ~>
      var, ctx = if
        ctx :: Expression and len ctx.args == 2 and ctx.op == '=' => ctx.args
        otherwise => Name ctx.loc False '_', ctx

      @pushconst None  # reserve space for a return value
      @pushast   ctx
      with @jump 'SETUP_WITH' delta: +8 =>  #=> None, __exit__, return value of __enter__
        @popast    var                      #=> None, __exit__
        @pushast   body                     #=> None, __exit__, return value
        @append    'ROT_THREE' delta: +0
        @append    'ROT_TWO'   delta: +0
        @append    'POP_BLOCK' delta: -1     #=> return value, __exit__
        @pushconst None                      # this is for END_FINALLY
      @append 'WITH_CLEANUP' delta: -1
      @append 'END_FINALLY'  delta: -8

    #: Repeat while a condition is true.
    #:
    #: I wonder if there's a nicer way to write interlinked jumps.
    #:
    'while', fix 2 2 $ f (cond, body) ~>
      @pushconst False
      with @jump 'SETUP_LOOP' =>
        restart = @jump 'JUMP_ABSOLUTE' True
        @loops.append $ @jump 'CONTINUE_LOOP' reverse: True
        @pushast cond
        with @jump 'POP_JUMP_IF_FALSE' delta: -1 =>
          @pushast body
          @append  'POP_TOP' delta: -1
          restart.set
        @loops.pop -1
        @append 'POP_BLOCK'
        @append 'POP_TOP'   delta: -1
        @pushconst True

    #: Iterate over a...iterator, duh.
    #:
    #: Note that `var` may be any valid assignment target, not only a local variable.
    #:
    'for', fix 2 2 $ f (var, body) ~>
      # `var` was already syntax-checked in `symscan`.
      @pushconst False
      with @jump 'SETUP_LOOP' =>
        @pushast $ snd var.args
        @append    'GET_ITER'
        restart = @jump 'JUMP_ABSOLUTE' True
        @loops.append $ @jump 'CONTINUE_LOOP' reverse: True
        with @jump 'FOR_ITER' delta: +1 =>
          @popast $ fst var.args
          @pushast  body
          @append   'POP_TOP'   delta: -1
          restart.set
        @loops.pop -1
        @append 'POP_BLOCK' delta: -1
        @append 'POP_TOP'   delta: -1
        @pushconst True

    #: Stop the loop immediately.
    #:
    #: It will also return False.
    #:
    'break', fix 0 0 $ f _ ~> if
      @loops    => @append 'BREAK_LOOP'    delta: +1
      otherwise => raise $ f.invalid 'no loop to `break` out of'

    #: Continue on to the next iteration.
    #:
    #: Does not affect the return value of the loop.
    #:
    'continue', fix 0 0 $ f _ ~> if
      @loops    => (last @loops).set
      otherwise => raise $ f.invalid 'no loop to `continue`'

    #: Yield control to the caller.
    #:
    #: Did you know that generators have a `send` method? Look it up.
    #:
    'yield', fix 1 2 $ f (*flags, it) ~>
      from = False
      for f in flags => if
        f == 'from' => from = True
        otherwise   => raise $ f.invalid 'unrecognized `yield` modifier'

      @generator = True
      @pushast it
      if from      => @append 'GET_ITER', @pushconst None, @append 'YIELD_FROM' delta: -1
         otherwise => @append 'YIELD_VALUE'

    'if', pair_args $ f xs ~>
      jumps = list
        where for (cond, action) in xs => yield $
          @pushast cond
          with @jump 'POP_JUMP_IF_FALSE' delta: -1 =>
            @pushast action
            @jump 'JUMP_FORWARD' delta: -1
      @pushconst None
      for x in jumps => x.set

    'raise', fix 1 1 $ f (exc,) ~>
      # TODO __cause__
      @pushast exc
      @append  'RAISE_VARARGS' 1

    'except', fix 1 inf $ pair_args $ f ((name, try), *xs) ~>
      @pushconst None
      if xs and head (last xs) == 'finally' => @pushfinally name try xs $ snd $ xs.pop -1
         otherwise                          => @pushexcept  name try xs

  infixl = dict'
    ':',  undefined 'keyword argument to what function?'
    '~',  undefined 'this operator is prefix'
    '@',  undefined 'this operator is prefix'
    '@@', undefined 'this operator is prefix'

    '!',     f g ~> @pushcall g
    ',',     f x ~> @pushcall f x  # i.e. same as in `prefix`.
    '->',    f x ~> @pushcall f x $ Constant f.loc None  # `x R` => `x R None`
    '~>',    f x ~> @pushcall f x $ Constant f.loc None
    'while', f x ~> @pushcall f x $ Constant f.loc None
    'for',   f x ~> @pushcall f x $ Constant f.loc None
    'where', f x ~> @pushcall f x $ Constant f.loc None

  infixr = dict'
    ':', undefined 'keyword argument to what function?'
    '!', undefined 'this operator is postfix'
    ',', undefined 'this operator is unbindable'

    '~',     f x ~> (@pushast x, @append 'UNARY_INVERT')
    '-',     f x ~> (@pushast x, @append 'UNARY_NEGATIVE')
    'where', f x ~>  @pushcall f x $ Constant f.loc None
    '@',     f x ~>  @pushcall (Name f.loc True '.')  (Name f.loc False 'self')  x
    '@@',    f x ~>  @pushcall (Name f.loc True '!.') (Name f.loc False '__dg_super__') x

    '->', f body ~> @pushfunc' body () () () dict! () () dict!
    '~>', f body ~>
      @pushname 'property'
      @pushfunc' body ('self',) () () dict! () () dict!
      @append 'CALL_FUNCTION' 1 delta: -1
